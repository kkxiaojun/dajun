(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{205:function(v,_,t){"use strict";t.r(_);var e=t(0),a=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"浏览器之问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器之问"}},[v._v("#")]),v._v(" 浏览器之问")]),v._v(" "),t("p",[v._v("内容会涵盖"),t("code",[v._v("浏览器工作原理")]),v._v("、"),t("code",[v._v("浏览器安全")]),v._v("和"),t("code",[v._v("性能监控和分析")]),v._v("。文章会分上下两次来发，今天这一篇是整个系列的上篇。")]),v._v(" "),t("h2",{attrs:{id:"第1篇-能不能说一说浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第1篇-能不能说一说浏览器缓存"}},[v._v("#")]),v._v(" 第1篇: 能不能说一说浏览器缓存?")]),v._v(" "),t("p",[v._v("缓存是性能优化中非常重要的一环，浏览器的缓存机制对开发也是非常重要的知识点。接下来以三个部分来把浏览器的缓存机制说清楚：")]),v._v(" "),t("ul",[t("li",[v._v("强缓存")]),v._v(" "),t("li",[v._v("协商缓存")]),v._v(" "),t("li",[v._v("缓存位置")])]),v._v(" "),t("h3",{attrs:{id:"强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[v._v("#")]),v._v(" 强缓存")]),v._v(" "),t("p",[v._v("浏览器中的缓存作用分为两种情况，一种是需要发送"),t("code",[v._v("HTTP")]),v._v("请求，一种是不需要发送。")]),v._v(" "),t("p",[v._v("首先是检查强缓存，这个阶段"),t("code",[v._v("不需要")]),v._v("发送HTTP请求。")]),v._v(" "),t("p",[v._v("如何来检查呢？通过相应的字段来进行，但是说起这个字段就有点门道了。")]),v._v(" "),t("p",[v._v("在"),t("code",[v._v("HTTP/1.0")]),v._v("和"),t("code",[v._v("HTTP/1.1")]),v._v("当中，这个字段是不一样的。在早期，也就是"),t("code",[v._v("HTTP/1.0")]),v._v("时期，使用的是"),t("strong",[v._v("Expires")]),v._v("，而"),t("code",[v._v("HTTP/1.1")]),v._v("使用的是"),t("strong",[v._v("Cache-Control")]),v._v("。让我们首先来看看Expires。")]),v._v(" "),t("h4",{attrs:{id:"expires"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[v._v("#")]),v._v(" Expires")]),v._v(" "),t("p",[t("code",[v._v("Expires")]),v._v("即过期时间，存在于服务端返回的响应头中，告诉浏览器在这个过期时间之前可以直接从缓存里面获取数据，无需再次请求。比如下面这样:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    Expires"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" Wed"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("22")]),v._v(" Nov "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("2019")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("08")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("41")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("00")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("GMT")]),v._v("\n")])])]),t("p",[v._v("表示资源在"),t("code",[v._v("2019年11月22号8点41分")]),v._v("过期，过期了就得向服务端发请求。")]),v._v(" "),t("p",[v._v("这个方式看上去没什么问题，合情合理，但其实潜藏了一个坑，那就是"),t("strong",[v._v("服务器的时间和浏览器的时间可能并不一致")]),v._v("，那服务器返回的这个过期时间可能就是不准确的。因此这种方式很快在后来的HTTP1.1版本中被抛弃了。")]),v._v(" "),t("h4",{attrs:{id:"cache-control"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[v._v("#")]),v._v(" Cache-Control")]),v._v(" "),t("p",[v._v("在HTTP1.1中，采用了一个非常关键的字段："),t("code",[v._v("Cache-Control")]),v._v("。这个字段也是存在于")]),v._v(" "),t("p",[v._v("它和"),t("code",[v._v("Expires")]),v._v("本质的不同在于它并没有采用"),t("code",[v._v("具体的过期时间点")]),v._v("这个方式，而是采用过期时长来控制缓存，对应的字段是"),t("strong",[v._v("max-age")]),v._v("。比如这个例子:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    Cache"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("Control"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("max"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("age"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("3600")]),v._v("\n")])])]),t("p",[v._v("代表这个响应返回后在 3600 秒，也就是一个小时之内可以直接使用缓存。")]),v._v(" "),t("p",[v._v("如果你觉得它只有"),t("code",[v._v("max-age")]),v._v("一个属性的话，那就大错特错了。")]),v._v(" "),t("p",[v._v("它其实可以组合非常多的指令，完成更多场景的缓存判断, 将一些关键的属性列举如下: "),t("strong",[v._v("public")]),v._v(": 客户端和代理服务器都可以缓存。因为一个请求可能要经过不同的"),t("code",[v._v("代理服务器")]),v._v("最后才到达目标服务器，那么结果就是不仅仅浏览器可以缓存数据，中间的任何代理节点都可以进行缓存。")]),v._v(" "),t("p",[t("strong",[v._v("private")]),v._v("： 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。")]),v._v(" "),t("p",[t("strong",[v._v("no-cache")]),v._v(": 跳过当前的强缓存，发送HTTP请求，即直接进入"),t("code",[v._v("协商缓存阶段")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("no-store")]),v._v("：非常粗暴，不进行任何形式的缓存。")]),v._v(" "),t("p",[t("strong",[v._v("s-maxage")]),v._v("：这和"),t("code",[v._v("max-age")]),v._v("长得比较像，但是区别在于s-maxage是针对代理服务器的缓存时间。")]),v._v(" "),t("p",[v._v("值得注意的是，当"),t("strong",[v._v("Expires")]),v._v("和"),t("strong",[v._v("Cache-Control")]),v._v("同时存在的时候，"),t("strong",[v._v("Cache-Control")]),v._v("会优先考虑。")]),v._v(" "),t("p",[v._v("当然，还存在一种情况，当资源缓存时间超时了，也就是"),t("code",[v._v("强缓存")]),v._v("失效了，接下来怎么办？没错，这样就进入到第二级屏障——"),t("strong",[v._v("协商缓存")]),v._v("了。")]),v._v(" "),t("h3",{attrs:{id:"协商缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),t("p",[v._v("强缓存失效之后，浏览器在请求头中携带相应的"),t("code",[v._v("缓存tag")]),v._v("来向服务器发请求，由服务器根据这个tag，来决定是否使用缓存，这就是"),t("strong",[v._v("协商缓存")]),v._v("。")]),v._v(" "),t("p",[v._v("具体来说，这样的缓存tag分为两种: "),t("strong",[v._v("Last-Modified")]),v._v(" 和 "),t("strong",[v._v("ETag")]),v._v("。这两者各有优劣，并不存在谁对谁有"),t("code",[v._v("绝对的优势")]),v._v("，跟上面强缓存的两个 tag 不一样。")]),v._v(" "),t("h4",{attrs:{id:"last-modified"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#last-modified"}},[v._v("#")]),v._v(" Last-Modified")]),v._v(" "),t("p",[v._v("即最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段。")]),v._v(" "),t("p",[v._v("浏览器接收到后，如果再次请求，会在请求头中携带"),t("code",[v._v("If-Modified-Since")]),v._v("字段，这个字段的值也就是服务器传来的最后修改时间。")]),v._v(" "),t("p",[v._v("服务器拿到请求头中的"),t("code",[v._v("If-Modified-Since")]),v._v("的字段后，其实会和这个服务器中"),t("code",[v._v("该资源的最后修改时间")]),v._v("对比:")]),v._v(" "),t("ul",[t("li",[v._v("如果请求头中的这个值小于最后修改时间，说明是时候更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。")]),v._v(" "),t("li",[v._v("否则返回304，告诉浏览器直接用缓存。")])]),v._v(" "),t("h4",{attrs:{id:"etag"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#etag"}},[v._v("#")]),v._v(" ETag")]),v._v(" "),t("p",[t("code",[v._v("ETag")]),v._v(" 是服务器根据当前文件的内容，给文件生成的唯一标识，只要里面的内容有改动，这个值就会变。服务器通过"),t("code",[v._v("响应头")]),v._v("把这个值给浏览器。")]),v._v(" "),t("p",[v._v("浏览器接收到"),t("code",[v._v("ETag")]),v._v("的值，会在下次请求时，将这个值作为"),t("strong",[v._v("If-None-Match")]),v._v("这个字段的内容，并放到请求头中，然后发给服务器。")]),v._v(" "),t("p",[v._v("服务器接收到"),t("strong",[v._v("If-None-Match")]),v._v("后，会跟服务器上该资源的"),t("strong",[v._v("ETag")]),v._v("进行比对:")]),v._v(" "),t("ul",[t("li",[v._v("如果两者不一样，说明要更新了。返回新的资源，跟常规的HTTP请求响应的流程一样。")]),v._v(" "),t("li",[v._v("否则返回304，告诉浏览器直接用缓存。")])]),v._v(" "),t("h4",{attrs:{id:"两者对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两者对比"}},[v._v("#")]),v._v(" 两者对比")]),v._v(" "),t("ol",[t("li",[v._v("在"),t("code",[v._v("精准度")]),v._v("上，"),t("code",[v._v("ETag")]),v._v("优于"),t("code",[v._v("Last-Modified")]),v._v("。优于 ETag 是按照内容给资源上标识，因此能准确感知资源的变化。而 Last-Modified 就不一样了，它在一些特殊的情况并不能准确感知资源变化，主要有两种情况:")])]),v._v(" "),t("ul",[t("li",[v._v("编辑了资源文件，但是文件内容并没有更改，这样也会造成缓存失效。")]),v._v(" "),t("li",[v._v("Last-Modified 能够感知的单位时间是秒，如果文件在 1 秒内改变了多次，那么这时候的 Last-Modified 并没有体现出修改了。")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("在性能上，"),t("code",[v._v("Last-Modified")]),v._v("优于"),t("code",[v._v("ETag")]),v._v("，也很简单理解，"),t("code",[v._v("Last-Modified")]),v._v("仅仅只是记录一个时间点，而 "),t("code",[v._v("Etag")]),v._v("需要根据文件的具体内容生成哈希值。")])]),v._v(" "),t("p",[v._v("另外，如果两种方式都支持的话，服务器会优先考虑"),t("code",[v._v("ETag")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"缓存位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[v._v("#")]),v._v(" 缓存位置")]),v._v(" "),t("p",[v._v("前面我们已经提到，当"),t("code",[v._v("强缓存")]),v._v("命中或者协商缓存中服务器返回304的时候，我们直接从缓存中获取资源。那这些资源究竟缓存在什么位置呢？")]),v._v(" "),t("p",[v._v("浏览器中的缓存位置一共有四种，按优先级从高到低排列分别是：")]),v._v(" "),t("ul",[t("li",[v._v("Service Worker")]),v._v(" "),t("li",[v._v("Memory Cache")]),v._v(" "),t("li",[v._v("Disk Cache")]),v._v(" "),t("li",[v._v("Push Cache")])]),v._v(" "),t("h3",{attrs:{id:"service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[v._v("#")]),v._v(" Service Worker")]),v._v(" "),t("p",[v._v("Service Worker 借鉴了 Web Worker的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问"),t("code",[v._v("DOM")]),v._v("。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如"),t("code",[v._v("离线缓存")]),v._v("、"),t("code",[v._v("消息推送")]),v._v("和"),t("code",[v._v("网络代理")]),v._v("等功能。其中的"),t("code",[v._v("离线缓存")]),v._v("就是 "),t("strong",[v._v("Service Worker Cache")]),v._v("。")]),v._v(" "),t("p",[v._v("Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，我们将会在后面的 PWA 的分享中详细介绍。")]),v._v(" "),t("h3",{attrs:{id:"memory-cache-和-disk-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache-和-disk-cache"}},[v._v("#")]),v._v(" Memory Cache 和 Disk Cache")]),v._v(" "),t("p",[t("strong",[v._v("Memory Cache")]),v._v("指的是内存缓存，从效率上讲它是最快的。但是从存活时间来讲又是最短的，当渲染进程结束后，内存缓存也就不存在了。")]),v._v(" "),t("p",[t("strong",[v._v("Disk Cache")]),v._v("就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。稍微有些计算机基础的应该很好理解，就不展开了。")]),v._v(" "),t("p",[v._v("好，现在问题来了，既然两者各有优劣，那浏览器如何决定将资源放进内存还是硬盘呢？主要策略如下：")]),v._v(" "),t("ul",[t("li",[v._v("比较大的JS、CSS文件会直接被丢进磁盘，反之丢进内存")]),v._v(" "),t("li",[v._v("内存使用率比较高的时候，文件优先进入磁盘")])]),v._v(" "),t("h3",{attrs:{id:"push-cache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#push-cache"}},[v._v("#")]),v._v(" Push Cache")]),v._v(" "),t("p",[v._v("即推送缓存，这是浏览器缓存的最后一道防线。它是 "),t("code",[v._v("HTTP/2")]),v._v(" 中的内容，虽然现在应用的并不广泛，但随着 HTTP/2 的推广，它的应用越来越广泛。关于 Push Cache，有非常多的内容可以挖掘，不过这已经不是本文的重点，大家可以参考这篇"),t("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[v._v("扩展文章"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("对浏览器的缓存机制来做个简要的总结:")]),v._v(" "),t("p",[v._v("首先通过 "),t("code",[v._v("Cache-Control")]),v._v(" 验证强缓存是否可用")]),v._v(" "),t("ul",[t("li",[v._v("如果强缓存可用，直接使用")]),v._v(" "),t("li",[v._v("否则进入协商缓存，即发送 HTTP 请求，服务器通过请求头中的"),t("code",[v._v("If-Modified-Since")]),v._v("或者"),t("code",[v._v("If-None-Match")]),v._v("字段检查资源是否更新\n"),t("ul",[t("li",[v._v("若资源更新，返回资源和200状态码")]),v._v(" "),t("li",[v._v("否则，返回304，告诉浏览器直接从缓存获取资源")])])])]),v._v(" "),t("h2",{attrs:{id:"第2篇-能不能说一说浏览器的本地存储？各自优劣如何？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第2篇-能不能说一说浏览器的本地存储？各自优劣如何？"}},[v._v("#")]),v._v(" 第2篇: 能不能说一说浏览器的本地存储？各自优劣如何？")]),v._v(" "),t("p",[v._v("浏览器的本地存储主要分为"),t("code",[v._v("Cookie")]),v._v("、"),t("code",[v._v("WebStorage")]),v._v("和"),t("code",[v._v("IndexedDB")]),v._v(", 其中"),t("code",[v._v("WebStorage")]),v._v("又可以分为"),t("code",[v._v("localStorage")]),v._v("和"),t("code",[v._v("sessionStorage")]),v._v("。接下来我们就来一一分析这些本地存储方案。")]),v._v(" "),t("h3",{attrs:{id:"cookie"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[v._v("#")]),v._v(" Cookie")]),v._v(" "),t("p",[t("code",[v._v("Cookie")]),v._v(" 最开始被设计出来其实并不是来做本地存储的，而是为了弥补"),t("code",[v._v("HTTP")]),v._v("在"),t("strong",[v._v("状态管理上的不足")]),v._v("。")]),v._v(" "),t("p",[t("code",[v._v("HTTP")]),v._v(" 协议是一个无状态协议，客户端向服务器发请求，服务器返回响应，故事就这样结束了，但是下次发请求如何让服务端知道客户端是谁呢？")]),v._v(" "),t("p",[v._v("这种背景下，就产生了 "),t("code",[v._v("Cookie")]),v._v(".")]),v._v(" "),t("p",[v._v("Cookie 本质上就是浏览器里面存储的一个很小的文本文件，内部以键值对的方式来存储(在chrome开发者面板的"),t("code",[v._v("Application")]),v._v("这一栏可以看到)。向同一个域名下发送请求，都会携带相同的 Cookie，服务器拿到 Cookie 进行解析，便能拿到客户端的状态。")]),v._v(" "),t("p",[v._v("Cookie 的作用很好理解，就是用来做"),t("strong",[v._v("状态存储")]),v._v("的，但它也是有诸多致命的缺陷的：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("容量缺陷。Cookie 的体积上限只有"),t("code",[v._v("4KB")]),v._v("，只能用来存储少量的信息。")])]),v._v(" "),t("li",[t("p",[v._v("性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。")])]),v._v(" "),t("li",[t("p",[v._v("安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在"),t("code",[v._v("HttpOnly")]),v._v("为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。")])])]),v._v(" "),t("h3",{attrs:{id:"localstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[v._v("#")]),v._v(" localStorage")]),v._v(" "),t("h4",{attrs:{id:"和cookie异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和cookie异同"}},[v._v("#")]),v._v(" 和Cookie异同")]),v._v(" "),t("p",[t("code",[v._v("localStorage")]),v._v("有一点跟"),t("code",[v._v("Cookie")]),v._v("一样，就是针对一个域名，即在同一个域名下，会存储相同的一段"),t("strong",[v._v("localStorage")]),v._v("。")]),v._v(" "),t("p",[v._v("不过它相对"),t("code",[v._v("Cookie")]),v._v("还是有相当多的区别的:")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("容量。localStorage 的容量上限为"),t("strong",[v._v("5M")]),v._v("，相比于"),t("code",[v._v("Cookie")]),v._v("的 4K 大大增加。当然这个 5M 是针对一个域名的，因此对于一个域名是持久存储的。")])]),v._v(" "),t("li",[t("p",[v._v("只存在客户端，默认不参与与服务端的通信。这样就很好地避免了 Cookie 带来的"),t("strong",[v._v("性能问题")]),v._v("和"),t("strong",[v._v("安全问题")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("接口封装。通过"),t("code",[v._v("localStorage")]),v._v("暴露在全局，并通过它的 "),t("code",[v._v("setItem")]),v._v(" 和 "),t("code",[v._v("getItem")]),v._v("等方法进行操作，非常方便。")])])]),v._v(" "),t("h4",{attrs:{id:"操作方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#操作方式"}},[v._v("#")]),v._v(" 操作方式")]),v._v(" "),t("p",[v._v("接下来我们来具体看看如何来操作"),t("code",[v._v("localStorage")]),v._v("。")]),v._v(" "),t("pre",[t("code",[v._v('let obj = { name: "sanyuan", age: 18 };\nlocalStorage.setItem("name", "sanyuan"); \nlocalStorage.setItem("info", JSON.stringify(obj));\n复制代码\n')])]),v._v(" "),t("p",[v._v("接着进入相同的域名时就能拿到相应的值:")]),v._v(" "),t("pre",[t("code",[v._v('let name = localStorage.getItem("name");\nlet info = JSON.parse(localStorage.getItem("info"));\n复制代码\n')])]),v._v(" "),t("p",[v._v("从这里可以看出，"),t("code",[v._v("localStorage")]),v._v("其实存储的都是字符串，如果是存储对象需要调用"),t("code",[v._v("JSON")]),v._v("的"),t("code",[v._v("stringify")]),v._v("方法，并且用"),t("code",[v._v("JSON.parse")]),v._v("来解析成对象。")]),v._v(" "),t("h4",{attrs:{id:"应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),t("p",[v._v("利用"),t("code",[v._v("localStorage")]),v._v("的较大容量和持久特性，可以利用"),t("code",[v._v("localStorage")]),v._v("存储一些内容稳定的资源，比如官网的"),t("code",[v._v("logo")]),v._v("，存储"),t("code",[v._v("Base64")]),v._v("格式的图片资源，因此利用"),t("code",[v._v("localStorage")])]),v._v(" "),t("h3",{attrs:{id:"sessionstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sessionstorage"}},[v._v("#")]),v._v(" sessionStorage")]),v._v(" "),t("h4",{attrs:{id:"特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),t("p",[t("code",[v._v("sessionStorage")]),v._v("以下方面和"),t("code",[v._v("localStorage")]),v._v("一致:")]),v._v(" "),t("ul",[t("li",[v._v("容量。容量上限也为 5M。")]),v._v(" "),t("li",[v._v("只存在客户端，默认不参与与服务端的通信。")]),v._v(" "),t("li",[v._v("接口封装。除了"),t("code",[v._v("sessionStorage")]),v._v("名字有所变化，存储方式、操作方式均和"),t("code",[v._v("localStorage")]),v._v("一样。")])]),v._v(" "),t("p",[v._v("但"),t("code",[v._v("sessionStorage")]),v._v("和"),t("code",[v._v("localStorage")]),v._v("有一个本质的区别，那就是前者只是会话级别的存储，并不是持久化存储。会话结束，也就是页面关闭，这部分"),t("code",[v._v("sessionStorage")]),v._v("就不复存在了。")]),v._v(" "),t("h4",{attrs:{id:"应用场景-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用场景-2"}},[v._v("#")]),v._v(" 应用场景")]),v._v(" "),t("ol",[t("li",[v._v("可以用它对表单信息进行维护，将表单信息存储在里面，可以保证页面即使刷新也不会让之前的表单信息丢失。")]),v._v(" "),t("li",[v._v("可以用它存储本次浏览记录。如果关闭页面后不需要这些记录，用"),t("code",[v._v("sessionStorage")]),v._v("就再合适不过了。事实上微博就采取了这样的存储方式。")])]),v._v(" "),t("h3",{attrs:{id:"indexeddb"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb"}},[v._v("#")]),v._v(" IndexedDB")]),v._v(" "),t("p",[t("code",[v._v("IndexedDB")]),v._v("是运行在浏览器中的"),t("code",[v._v("非关系型数据库")]),v._v(", 本质上是数据库，绝不是和刚才WebStorage的 5M 一个量级，理论上这个容量是没有上限的。")]),v._v(" "),t("p",[v._v("关于它的使用，本文侧重原理，而且 MDN 上的教程文档已经非常详尽，这里就不做赘述了，感兴趣可以看一下"),t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API/Using_IndexedDB",target:"_blank",rel:"noopener noreferrer"}},[v._v("使用文档"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("接着我们来分析一下"),t("code",[v._v("IndexedDB")]),v._v("的一些重要特性，除了拥有数据库本身的特性，比如"),t("code",[v._v("支持事务")]),v._v("，"),t("code",[v._v("存储二进制数据")]),v._v("，还有这样一些特性需要格外注意：")]),v._v(" "),t("ol",[t("li",[v._v("键值对存储。内部采用"),t("code",[v._v("对象仓库")]),v._v("存放数据，在这个对象仓库中数据采用"),t("strong",[v._v("键值对")]),v._v("的方式来存储。")]),v._v(" "),t("li",[v._v("异步操作。数据库的读写属于 I/O 操作, 浏览器中对异步 I/O 提供了支持。")]),v._v(" "),t("li",[v._v("受同源策略限制，即无法访问跨域的数据库。")])]),v._v(" "),t("h3",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("浏览器中各种本地存储和缓存技术的发展，给前端应用带来了大量的机会，PWA 也正是依托了这些优秀的存储方案才得以发展起来。重新梳理一下这些本地存储方案:")]),v._v(" "),t("ol",[t("li",[t("code",[v._v("cookie")]),v._v("并不适合存储，而且存在非常多的缺陷。")]),v._v(" "),t("li",[t("code",[v._v("Web Storage")]),v._v("包括"),t("code",[v._v("localStorage")]),v._v("和"),t("code",[v._v("sessionStorage")]),v._v(", 默认不会参与和服务器的通信。")]),v._v(" "),t("li",[t("code",[v._v("IndexedDB")]),v._v("为运行在浏览器上的非关系型数据库，为大型数据的存储提供了接口。")])]),v._v(" "),t("h2",{attrs:{id:"第3篇-说一说从输入url到页面呈现发生了什么？——网络篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第3篇-说一说从输入url到页面呈现发生了什么？——网络篇"}},[v._v("#")]),v._v(" 第3篇: 说一说从输入URL到页面呈现发生了什么？——网络篇")]),v._v(" "),t("p",[v._v("这是一个可以无限难的问题。出这个题目的目的就是为了考察你的 web 基础深入到什么程度。由于水平和篇幅有限，在这里我将把其中一些重要的过程给大家梳理一遍，相信能在绝大部分的情况下给出一个比较惊艳的答案。")]),v._v(" "),t("p",[v._v("这里我提前声明，由于是一个综合性非常强的问题，可能会在某一个点上深挖出非常多的细节，我个人觉得学习是一个循序渐进的过程，在明白了整体过程后再去自己研究这些细节，会对整个知识体系有更深的理解。同时，关于延申出来的细节点我都有参考资料，看完这篇之后不妨再去深入学习一下，扩展知识面。")]),v._v(" "),t("p",[v._v("好，正题开始。")]),v._v(" "),t("p",[v._v("此时此刻，你在浏览器地址栏输入了百度的网址:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    https"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token regex"}},[v._v("/www.baidu.com/")]),v._v("\n")])])]),t("h3",{attrs:{id:"网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络请求"}},[v._v("#")]),v._v(" 网络请求")]),v._v(" "),t("h4",{attrs:{id:"_1-构建请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-构建请求"}},[v._v("#")]),v._v(" 1. 构建请求")]),v._v(" "),t("p",[v._v("浏览器会构建请求行:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 请求方法是GET，路径为根路径，HTTP协议版本为1.1")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("GET")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.1")]),v._v("\n")])])]),t("h4",{attrs:{id:"_2-查找强缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-查找强缓存"}},[v._v("#")]),v._v(" 2. 查找强缓存")]),v._v(" "),t("p",[v._v("先检查强缓存，如果命中直接使用，否则进入下一步。关于强缓存，如果不清楚可以参考上一篇文章。")]),v._v(" "),t("h4",{attrs:{id:"_3-dns解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-dns解析"}},[v._v("#")]),v._v(" 3. DNS解析")]),v._v(" "),t("p",[v._v("由于我们输入的是域名，而数据包是通过"),t("code",[v._v("IP地址")]),v._v("传给对方的。因此我们需要得到域名对应的"),t("code",[v._v("IP地址")]),v._v("。这个过程需要依赖一个服务系统，这个系统将域名和 IP 一一映射，我们将这个系统就叫做"),t("strong",[v._v("DNS")]),v._v("（域名系统）。得到具体 IP 的过程就是"),t("code",[v._v("DNS")]),v._v("解析。")]),v._v(" "),t("p",[v._v("当然，值得注意的是，浏览器提供了"),t("strong",[v._v("DNS数据缓存功能")]),v._v("。即如果一个域名已经解析过，那会把解析的结果缓存下来，下次处理直接走缓存，不需要经过 "),t("code",[v._v("DNS解析")]),v._v("。")]),v._v(" "),t("p",[v._v("另外，如果不指定端口的话，默认采用对应的 IP 的 80 端口。")]),v._v(" "),t("h4",{attrs:{id:"_4-建立-tcp-连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-建立-tcp-连接"}},[v._v("#")]),v._v(" 4. 建立 TCP 连接")]),v._v(" "),t("p",[v._v("这里要提醒一点，Chrome 在同一个域名下要求同时最多只能有 6 个 TCP 连接，超过 6 个的话剩下的请求就得等待。")]),v._v(" "),t("p",[v._v("假设现在不需要等待，我们进入了 TCP 连接的建立阶段。首先解释一下什么是 TCP:")]),v._v(" "),t("blockquote",[t("p",[v._v("TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。")])]),v._v(" "),t("p",[v._v("建立 "),t("code",[v._v("TCP连接")]),v._v("经历了下面三个阶段:")]),v._v(" "),t("ol",[t("li",[v._v("通过"),t("strong",[v._v("三次握手")]),v._v("(即总共发送3个数据包确认已经建立连接)建立客户端和服务器之间的连接。")]),v._v(" "),t("li",[v._v("进行数据传输。这里有一个重要的机制，就是接收方接收到数据包后必须要向发送方"),t("code",[v._v("确认")]),v._v(", 如果发送方没有接到这个"),t("code",[v._v("确认")]),v._v("的消息，就判定为数据包丢失，并重新发送该数据包。当然，发送的过程中还有一个优化策略，就是把"),t("code",[v._v("大的数据包拆成一个个小包")]),v._v("，依次传输到接收方，接收方按照这个小包的顺序把它们"),t("code",[v._v("组装")]),v._v("成完整数据包。")]),v._v(" "),t("li",[v._v("断开连接的阶段。数据传输完成，现在要断开连接了，通过"),t("strong",[v._v("四次挥手")]),v._v("来断开连接。")])]),v._v(" "),t("p",[v._v("读到这里，你应该明白 TCP 连接通过什么手段来保证数据传输的可靠性，一是"),t("code",[v._v("三次握手")]),v._v("确认连接，二是"),t("code",[v._v("数据包校验")]),v._v("保证数据到达接收方，三是通过"),t("code",[v._v("四次挥手")]),v._v("断开连接。")]),v._v(" "),t("p",[v._v("当然，如果再深入地问，比如"),t("strong",[v._v("为什么要三次握手，两次不行吗？第三次握手失败了怎么办？为什么要四次挥手")]),v._v("等等这一系列的问题，涉及计算机网络的基础知识，比较底层，但是也是非常重要的细节，希望你能好好研究一下，另外这里有一篇不错的文章，"),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/86426969",target:"_blank",rel:"noopener noreferrer"}},[v._v("点击进入相应的推荐文章"),t("OutboundLink")],1),v._v("，相信这篇文章能给你启发。")]),v._v(" "),t("h4",{attrs:{id:"_5-发送-http-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-发送-http-请求"}},[v._v("#")]),v._v(" 5.发送 HTTP 请求")]),v._v(" "),t("p",[v._v("现在"),t("code",[v._v("TCP连接")]),v._v("建立完毕，浏览器可以和服务器开始通信，即开始发送 HTTP 请求。浏览器发 HTTP 请求要携带三样东西:"),t("strong",[v._v("请求行")]),v._v("、"),t("strong",[v._v("请求头")]),v._v("和"),t("strong",[v._v("请求体")]),v._v("。")]),v._v(" "),t("p",[v._v("首先，浏览器会向服务器发送"),t("strong",[v._v("请求行")]),v._v(",关于"),t("strong",[v._v("请求行")]),v._v("， 我们在这一部分的第一步就构建完了，贴一下内容:")]),v._v(" "),t("pre",[t("code",[v._v("// 请求方法是GET，路径为根路径，HTTP协议版本为1.1\nGET / HTTP/1.1\n复制代码\n")])]),v._v(" "),t("p",[v._v("结构很简单，由"),t("strong",[v._v("请求方法")]),v._v("、"),t("strong",[v._v("请求URI")]),v._v("和"),t("strong",[v._v("HTTP版本协议")]),v._v("组成。")]),v._v(" "),t("p",[v._v("同时也要带上"),t("strong",[v._v("请求头")]),v._v("，比如我们之前说的"),t("strong",[v._v("Cache-Control")]),v._v("、"),t("strong",[v._v("If-Modified-Since")]),v._v("、"),t("strong",[v._v("If-None-Match")]),v._v("都由可能被放入请求头中作为缓存的标识信息。当然了还有一些其他的属性，列举如下:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    Accept"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" text"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("html"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("application"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("xhtml"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v("xml"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("application"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("xml"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("q"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0.9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("image"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("webp"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v("image"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v("apng"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("/*;q=0.8,application/signed-exchange;v=b3\n    Accept-Encoding: gzip, deflate, br\n    Accept-Language: zh-CN,zh;q=0.9\n    Cache-Control: no-cache\n    Connection: keep-alive\n    Cookie: /* 省略cookie信息 */")]),v._v("\n    Host"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" www"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("baidu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),v._v("com\n    Pragma"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" no"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("cache\n    Upgrade"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("Insecure"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("Requests"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v("\n    User"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v("Agent"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v(" Mozilla"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("5.0")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("iPhone"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("CPU")]),v._v(" iPhone "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("OS")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("11_0")]),v._v(" like Mac "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("OS")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("X")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" AppleWebKit"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("604.1")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v(".38")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("KHTML")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" like Gecko"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" Version"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("11.0")]),v._v(" Mobile"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("15")]),v._v("A372 Safari"),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("604.1")]),v._v("\n")])])]),t("p",[v._v("最后是请求体，请求体只有在"),t("code",[v._v("POST")]),v._v("方法下存在，常见的场景是"),t("strong",[v._v("表单提交")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"网络响应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络响应"}},[v._v("#")]),v._v(" 网络响应")]),v._v(" "),t("p",[v._v("HTTP 请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。")]),v._v(" "),t("p",[v._v("跟请求部分类似，网络响应具有三个部分:"),t("strong",[v._v("响应行")]),v._v("、"),t("strong",[v._v("响应头")]),v._v("和"),t("strong",[v._v("响应体")]),v._v("。")]),v._v(" "),t("p",[v._v("响应行类似下面这样:")]),v._v(" "),t("pre",[t("code",[v._v("HTTP/1.1 200 OK\n复制代码\n")])]),v._v(" "),t("p",[v._v("由"),t("code",[v._v("HTTP协议版本")]),v._v("、"),t("code",[v._v("状态码")]),v._v("和"),t("code",[v._v("状态描述")]),v._v("组成。")]),v._v(" "),t("p",[v._v("响应头包含了服务器及其返回数据的一些信息, 服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息。")]),v._v(" "),t("p",[v._v("举例如下:")]),v._v(" "),t("pre",[t("code",[v._v("Cache-Control: no-cache\nConnection: keep-alive\nContent-Encoding: gzip\nContent-Type: text/html;charset=utf-8\nDate: Wed, 04 Dec 2019 12:29:13 GMT\nServer: apache\nSet-Cookie: rsv_i=f9a0SIItKqzv7kqgAAgphbGyRts3RwTg%2FLyU3Y5Eh5LwyfOOrAsvdezbay0QqkDqFZ0DfQXby4wXKT8Au8O7ZT9UuMsBq2k; path=/; domain=.baidu.com\n复制代码\n")])]),v._v(" "),t("p",[v._v("响应完成之后怎么办？TCP 连接就断开了吗？")]),v._v(" "),t("p",[v._v("不一定。这时候要判断"),t("code",[v._v("Connection")]),v._v("字段, 如果请求头或响应头中包含"),t("strong",[v._v("Connection: Keep-Alive")]),v._v("，表示建立了持久连接，这样"),t("code",[v._v("TCP")]),v._v("连接会一直保持，之后请求统一站点的资源会复用这个连接。")]),v._v(" "),t("p",[v._v("否则断开"),t("code",[v._v("TCP")]),v._v("连接, 请求-响应流程结束。")]),v._v(" "),t("h3",{attrs:{id:"总结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("到此，我们来总结一下主要内容，也就是浏览器端的网络请求过程：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b095268038?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"第4篇-说一说从输入url到页面呈现发生了什么？——解析算法篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第4篇-说一说从输入url到页面呈现发生了什么？——解析算法篇"}},[v._v("#")]),v._v(" 第4篇: 说一说从输入URL到页面呈现发生了什么？——解析算法篇")]),v._v(" "),t("p",[v._v("完成了网络请求和响应，如果响应头中"),t("code",[v._v("Content-Type")]),v._v("的值是"),t("code",[v._v("text/html")]),v._v("，那么接下来就是浏览器的"),t("code",[v._v("解析")]),v._v("和"),t("code",[v._v("渲染")]),v._v("工作了。")]),v._v(" "),t("p",[v._v("首先来介绍解析部分，主要分为以下几个步骤:")]),v._v(" "),t("ul",[t("li",[v._v("构建 "),t("code",[v._v("DOM")]),v._v("树")]),v._v(" "),t("li",[t("code",[v._v("样式")]),v._v("计算")]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("布局树")]),v._v("("),t("code",[v._v("Layout Tree")]),v._v(")")])]),v._v(" "),t("h3",{attrs:{id:"构建-dom-树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom-树"}},[v._v("#")]),v._v(" 构建 DOM 树")]),v._v(" "),t("p",[v._v("由于浏览器无法直接理解"),t("code",[v._v("HTML字符串")]),v._v("，因此将这一系列的字节流转换为一种有意义并且方便操作的数据结构，这种数据结构就是"),t("code",[v._v("DOM树")]),v._v("。"),t("code",[v._v("DOM树")]),v._v("本质上是一个以"),t("code",[v._v("document")]),v._v("为根节点的多叉树。")]),v._v(" "),t("p",[v._v("那通过什么样的方式来进行解析呢？")]),v._v(" "),t("h4",{attrs:{id:"html文法的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html文法的本质"}},[v._v("#")]),v._v(" HTML文法的本质")]),v._v(" "),t("p",[v._v("首先，我们应该清楚把握一点: HTML 的文法并不是"),t("code",[v._v("上下文无关文法")]),v._v("。")]),v._v(" "),t("p",[v._v("这里，有必要讨论一下什么是"),t("code",[v._v("上下文无关文法")]),v._v("。")]),v._v(" "),t("p",[v._v("在计算机科学的"),t("strong",[v._v("编译原理")]),v._v("学科中，有非常明确的定义:")]),v._v(" "),t("blockquote",[t("p",[v._v("若一个形式文法G = (N, Σ, P, S) 的产生式规则都取如下的形式：V->w，则叫上下文无关语法。其中 V∈N ，w∈(N∪Σ)* 。")])]),v._v(" "),t("p",[v._v("其中把 G = (N, Σ, P, S) 中各个参量的意义解释一下:")]),v._v(" "),t("ol",[t("li",[v._v("N 是"),t("strong",[v._v("非终结符")]),v._v("(顾名思义，就是说最后一个符号不是它, 下面同理)集合。")]),v._v(" "),t("li",[v._v("Σ 是"),t("strong",[v._v("终结符")]),v._v("集合。")]),v._v(" "),t("li",[v._v("P 是开始符，它必须属于 N ，也就是非终结符。")]),v._v(" "),t("li",[v._v("S 就是不同的产生式的集合。如 S -> aSb 等等。")])]),v._v(" "),t("p",[v._v("通俗一点讲，"),t("code",[v._v("上下文无关的文法")]),v._v("就是说这个文法中所有产生式的左边都是一个非终结符。")]),v._v(" "),t("p",[v._v("看到这里，如果还有一点懵圈，我举个例子你就明白了。")]),v._v(" "),t("p",[v._v("比如:")]),v._v(" "),t("pre",[t("code",[v._v("A -> B\n复制代码\n")])]),v._v(" "),t("p",[v._v("这个文法中，每个产生式左边都会有一个非终结符，这就是"),t("code",[v._v("上下文无关的文法")]),v._v("。在这种情况下，"),t("code",[v._v("xBy")]),v._v("一定是可以规约出"),t("code",[v._v("xAy")]),v._v("的。")]),v._v(" "),t("p",[v._v("我们下面看看看一个反例：")]),v._v(" "),t("pre",[t("code",[v._v("aA -> B\nAa -> B\n复制代码\n")])]),v._v(" "),t("p",[v._v("这种情况就是不是"),t("code",[v._v("上下文无关的文法")]),v._v("，当遇到"),t("code",[v._v("B")]),v._v("的时候，我们不知道到底能不能规约出"),t("code",[v._v("A")]),v._v("，取决于左边或者右边是否有"),t("code",[v._v("a")]),v._v("存在，也就是说和上下文有关。")]),v._v(" "),t("p",[v._v("关于它为什么是"),t("code",[v._v("非上下文无关文法")]),v._v("，首先需要让大家注意的是，规范的 HTML 语法，是符合"),t("code",[v._v("上下文无关文法")]),v._v("的，能够体现它"),t("code",[v._v("非上下文无关")]),v._v("的是"),t("strong",[v._v("不标准的语法")]),v._v("。在此我仅举一个反例即可证明。")]),v._v(" "),t("p",[v._v("比如解析器扫描到"),t("code",[v._v("form")]),v._v("标签的时候，"),t("strong",[v._v("上下文无关文法")]),v._v("的处理方式是直接创建对应 form 的 DOM 对象，而真实的 HTML5 场景中却不是这样，解析器会查看 "),t("code",[v._v("form")]),v._v(" 的上下文，如果这个 "),t("code",[v._v("form")]),v._v(" 标签的父标签也是 "),t("code",[v._v("form")]),v._v(", 那么"),t("strong",[v._v("直接跳过")]),v._v("当前的 "),t("code",[v._v("form")]),v._v(" 标签，否则才创建 DOM 对象。")]),v._v(" "),t("p",[v._v("常规的编程语言都是"),t("strong",[v._v("上下文无关")]),v._v("的，而HTML却相反，也正是它"),t("strong",[v._v("非上下文无关")]),v._v("的特性，决定了"),t("code",[v._v("HTML Parser")]),v._v("并不能使用常规编程语言的解析器来完成，需要另辟蹊径。")]),v._v(" "),t("h4",{attrs:{id:"解析算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析算法"}},[v._v("#")]),v._v(" 解析算法")]),v._v(" "),t("p",[v._v("HTML5 "),t("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/parsing.html",target:"_blank",rel:"noopener noreferrer"}},[v._v("规范"),t("OutboundLink")],1),v._v("详细地介绍了解析算法。这个算法分为两个阶段:")]),v._v(" "),t("ol",[t("li",[v._v("标记化。")]),v._v(" "),t("li",[v._v("建树。")])]),v._v(" "),t("p",[v._v("对应的两个过程就是"),t("strong",[v._v("词法分析")]),v._v("和"),t("strong",[v._v("语法分析")]),v._v("。")]),v._v(" "),t("h5",{attrs:{id:"标记化算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记化算法"}},[v._v("#")]),v._v(" 标记化算法")]),v._v(" "),t("p",[v._v("这个算法输入为"),t("code",[v._v("HTML文本")]),v._v("，输出为"),t("code",[v._v("HTML标记")]),v._v("，也成为"),t("strong",[v._v("标记生成器")]),v._v("。其中运用"),t("strong",[v._v("有限自动状态机")]),v._v("来完成。即在当当前状态下，接收一个或多个字符，就会更新到下一个状态。")]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("    <html>\n      <body>\n        Hello sanyuan\n      </body>\n    </html>\n")])])]),t("p",[v._v("通过一个简单的例子来演示一下"),t("code",[v._v("标记化")]),v._v("的过程。")]),v._v(" "),t("p",[v._v("遇到"),t("code",[v._v("<")]),v._v(", 状态为"),t("strong",[v._v("标记打开")]),v._v("。")]),v._v(" "),t("p",[v._v("接收"),t("code",[v._v("[a-z]")]),v._v("的字符，会进入"),t("strong",[v._v("标记名称状态")]),v._v("。")]),v._v(" "),t("p",[v._v("这个状态一直保持，直到遇到"),t("code",[v._v(">")]),v._v("，表示标记名称记录完成，这时候变为"),t("strong",[v._v("数据状态")]),v._v("。")]),v._v(" "),t("p",[v._v("接下来遇到"),t("code",[v._v("body")]),v._v("标签做同样的处理。")]),v._v(" "),t("p",[v._v("这个时候"),t("code",[v._v("html")]),v._v("和"),t("code",[v._v("body")]),v._v("的标记都记录好了。")]),v._v(" "),t("p",[v._v("现在来到"),t("code",[v._v("<body>")]),v._v("中的>，进入"),t("strong",[v._v("数据状态")]),v._v("，之后保持这样状态接收后面的字符"),t("strong",[v._v("hello sanyuan")]),v._v("。")]),v._v(" "),t("p",[v._v("接着接收 "),t("code",[v._v("</body>")]),v._v(" 中的"),t("code",[v._v("<")]),v._v("，回到"),t("strong",[v._v("标记打开")]),v._v(", 接收下一个"),t("code",[v._v("/")]),v._v("后，这时候会创建一个"),t("code",[v._v("end tag")]),v._v("的token。")]),v._v(" "),t("p",[v._v("随后进入"),t("strong",[v._v("标记名称状态")]),v._v(", 遇到"),t("code",[v._v(">")]),v._v("回到"),t("strong",[v._v("数据状态")]),v._v("。")]),v._v(" "),t("p",[v._v("接着以同样的样式处理 "),t("code",[v._v("</body>")]),v._v("。")]),v._v(" "),t("h5",{attrs:{id:"建树算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建树算法"}},[v._v("#")]),v._v(" 建树算法")]),v._v(" "),t("p",[v._v("之前提到过，DOM 树是一个以"),t("code",[v._v("document")]),v._v("为根节点的多叉树。因此解析器首先会创建一个"),t("code",[v._v("document")]),v._v("对象。标记生成器会把每个标记的信息发送给"),t("strong",[v._v("建树器")]),v._v("。"),t("strong",[v._v("建树器")]),v._v("接收到相应的标记时，会"),t("strong",[v._v("创建对应的 DOM 对象")]),v._v("。创建这个"),t("code",[v._v("DOM对象")]),v._v("后会做两件事情:")]),v._v(" "),t("ol",[t("li",[v._v("将"),t("code",[v._v("DOM对象")]),v._v("加入 DOM 树中。")]),v._v(" "),t("li",[v._v("将对应标记压入存放开放(与"),t("code",[v._v("闭合标签")]),v._v("意思对应)元素的栈中。")])]),v._v(" "),t("p",[v._v("还是拿下面这个例子说:")]),v._v(" "),t("pre",[t("code",[v._v("<html>\n  <body>\n    Hello sanyuan\n  </body>\n</html>\n复制代码\n")])]),v._v(" "),t("p",[v._v("首先，状态为"),t("strong",[v._v("初始化状态")]),v._v("。")]),v._v(" "),t("p",[v._v("接收到标记生成器传来的"),t("code",[v._v("html")]),v._v("标签，这时候状态变为"),t("strong",[v._v("before html状态")]),v._v("。同时创建一个"),t("code",[v._v("HTMLHtmlElement")]),v._v("的 DOM 元素, 将其加到"),t("code",[v._v("document")]),v._v("根对象上，并进行压栈操作。")]),v._v(" "),t("p",[v._v("接着状态自动变为"),t("strong",[v._v("before head")]),v._v(", 此时从标记生成器那边传来"),t("code",[v._v("body")]),v._v("，表示并没有"),t("code",[v._v("head")]),v._v(", 这时候"),t("strong",[v._v("建树器")]),v._v("会自动创建一个"),t("strong",[v._v("HTMLHeadElement")]),v._v("并将其加入到"),t("code",[v._v("DOM树")]),v._v("中。")]),v._v(" "),t("p",[v._v("现在进入到"),t("strong",[v._v("in head")]),v._v("状态, 然后直接跳到"),t("strong",[v._v("after head")]),v._v("。")]),v._v(" "),t("p",[v._v("现在"),t("strong",[v._v("标记生成器")]),v._v("传来了"),t("code",[v._v("body")]),v._v("标记，创建"),t("strong",[v._v("HTMLBodyElement")]),v._v(", 插入到"),t("code",[v._v("DOM")]),v._v("树中，同时压入开放标记栈。")]),v._v(" "),t("p",[v._v("接着状态变为"),t("strong",[v._v("in body")]),v._v("，然后来接收后面一系列的字符: "),t("strong",[v._v("Hello sanyuan")]),v._v("。接收到第一个字符的时候，会创建一个"),t("strong",[v._v("Text")]),v._v("节点并把字符插入其中，然后把"),t("strong",[v._v("Text")]),v._v("节点插入到 DOM 树中"),t("code",[v._v("body元素")]),v._v("的下面。随着不断接收后面的字符，这些字符会附在"),t("strong",[v._v("Text")]),v._v("节点上。")]),v._v(" "),t("p",[v._v("现在，"),t("strong",[v._v("标记生成器")]),v._v("传过来一个"),t("code",[v._v("body")]),v._v("的结束标记，进入到"),t("strong",[v._v("after body")]),v._v("状态。")]),v._v(" "),t("p",[t("strong",[v._v("标记生成器")]),v._v("最后传过来一个"),t("code",[v._v("html")]),v._v("的结束标记, 进入到"),t("strong",[v._v("after after body")]),v._v("的状态，表示解析过程到此结束。")]),v._v(" "),t("h5",{attrs:{id:"容错机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容错机制"}},[v._v("#")]),v._v(" 容错机制")]),v._v(" "),t("p",[v._v("讲到"),t("code",[v._v("HTML5")]),v._v("规范，就不得不说它强大的"),t("strong",[v._v("宽容策略")]),v._v(", 容错能力非常强，虽然大家褒贬不一，不过我想作为一名资深的前端工程师，有必要知道"),t("code",[v._v("HTML Parser")]),v._v("在容错方面做了哪些事情。")]),v._v(" "),t("p",[v._v("接下来是 WebKit 中一些经典的容错示例，发现有其他的也欢迎来补充。")]),v._v(" "),t("ol",[t("li",[v._v("使用"),t("br"),v._v("而不是"),t("br")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("\n    if (t->isCloseTag(brTag) && m_document->inCompatMode()) {\n      reportError(MalformedBRError);\n      t->beginTag = true;\n    }\n")])])]),t("p",[v._v("全部换为"),t("br"),v._v("的形式。")]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[v._v("表格离散")]),v._v(" "),t("table",[t("table",[t("tr",[t("td",[v._v("inner table")])])]),v._v(" "),t("tr",[t("td",[v._v("outer table")])])]),v._v("\n复制代码\n")])]),v._v(" "),t("p",[t("code",[v._v("WebKit")]),v._v("会自动转换为:")]),v._v(" "),t("pre",[t("code",[v._v("<table>\n    <tr><td>outer table</td></tr>\n</table>\n<table>\n    <tr><td>inner table</td></tr>\n</table>\n复制代码\n")])]),v._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[v._v("表单元素嵌套")])]),v._v(" "),t("p",[v._v("这时候直接忽略里面的"),t("code",[v._v("form")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"样式计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[v._v("#")]),v._v(" 样式计算")]),v._v(" "),t("p",[v._v("关于CSS样式，它的来源一般是三种:")]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("link标签引用")])]),v._v(" "),t("li",[t("strong",[v._v("style标签中的样式")])]),v._v(" "),t("li",[t("strong",[v._v("元素的内嵌style属性")])])]),v._v(" "),t("h4",{attrs:{id:"格式化样式表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#格式化样式表"}},[v._v("#")]),v._v(" 格式化样式表")]),v._v(" "),t("p",[v._v("首先，浏览器是无法直接识别 CSS 样式文本的，因此渲染引擎接收到 CSS 文本之后第一件事情就是将其转化为一个结构化的对象，即styleSheets。")]),v._v(" "),t("p",[v._v("这个格式化的过程过于复杂，而且对于不同的浏览器会有不同的优化策略，这里就不展开了。")]),v._v(" "),t("p",[v._v("在浏览器控制台能够通过"),t("code",[v._v("document.styleSheets")]),v._v("来查看这个最终的结构。当然，这个结构包含了以上三种CSS来源，为后面的样式操作提供了基础。")]),v._v(" "),t("h4",{attrs:{id:"标准化样式属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标准化样式属性"}},[v._v("#")]),v._v(" 标准化样式属性")]),v._v(" "),t("p",[v._v("有一些 CSS 样式的数值并不容易被渲染引擎所理解，因此需要在计算样式之前将它们标准化，如"),t("code",[v._v("em")]),v._v("->"),t("code",[v._v("px")]),v._v(","),t("code",[v._v("red")]),v._v("->"),t("code",[v._v("#ff0000")]),v._v(","),t("code",[v._v("bold")]),v._v("->"),t("code",[v._v("700")]),v._v("等等。")]),v._v(" "),t("h4",{attrs:{id:"计算每个节点的具体样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算每个节点的具体样式"}},[v._v("#")]),v._v(" 计算每个节点的具体样式")]),v._v(" "),t("p",[v._v("样式已经被"),t("code",[v._v("格式化")]),v._v("和"),t("code",[v._v("标准化")]),v._v(",接下来就可以计算每个节点的具体样式信息了。")]),v._v(" "),t("p",[v._v("其实计算的方式也并不复杂，主要就是两个规则: "),t("strong",[v._v("继承")]),v._v("和"),t("strong",[v._v("层叠")]),v._v("。")]),v._v(" "),t("p",[v._v("每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫"),t("code",[v._v("UserAgent样式")]),v._v("。这就是继承规则，非常容易理解。")]),v._v(" "),t("p",[v._v("然后是层叠规则，CSS 最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果，甚至有很多诡异的层叠现象，看过《CSS世界》的同学应该对此深有体会，具体的层叠规则属于深入 CSS 语言的范畴，这里就不过多介绍了。")]),v._v(" "),t("p",[v._v("不过值得注意的是，在计算完样式之后，所有的样式值会被挂在到"),t("code",[v._v("window.getComputedStyle")]),v._v("当中，也就是可以通过JS来获取计算后的样式，非常方便。")]),v._v(" "),t("h3",{attrs:{id:"生成布局树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成布局树"}},[v._v("#")]),v._v(" 生成布局树")]),v._v(" "),t("p",[v._v("现在已经生成了"),t("code",[v._v("DOM树")]),v._v("和"),t("code",[v._v("DOM样式")]),v._v("，接下来要做的就是通过浏览器的布局系统"),t("code",[v._v("确定元素的位置")]),v._v("，也就是要生成一棵"),t("code",[v._v("布局树")]),v._v("(Layout Tree)。")]),v._v(" "),t("p",[v._v("布局树生成的大致工作如下:")]),v._v(" "),t("ol",[t("li",[v._v("遍历生成的 DOM 树节点，并把他们添加到"),t("code",[v._v("布局树中")]),v._v("。")]),v._v(" "),t("li",[v._v("计算布局树节点的坐标位置。")])]),v._v(" "),t("p",[v._v("值得注意的是，这棵布局树值包含可见元素，对于 "),t("code",[v._v("head")]),v._v("标签和设置了"),t("code",[v._v("display: none")]),v._v("的元素，将不会被放入其中。")]),v._v(" "),t("p",[v._v("有人说首先会生成"),t("code",[v._v("Render Tree")]),v._v("，也就是渲染树，其实这还是 16 年之前的事情，现在 Chrome 团队已经做了大量的重构，已经没有生成"),t("code",[v._v("Render Tree")]),v._v("的过程了。而布局树的信息已经非常完善，完全拥有"),t("code",[v._v("Render Tree")]),v._v("的功能。")]),v._v(" "),t("p",[v._v("之所以不讲布局的细节，是因为它过于复杂，一一介绍会显得文章过于臃肿，不过大部分情况下我们只需要知道它所做的工作"),t("strong",[v._v("是什么")]),v._v("即可，如果想深入其中的原理，知道它是"),t("strong",[v._v("如何来做的")]),v._v("，我强烈推荐你去读一读人人FED团队的文章"),t("a",{attrs:{href:"https://www.rrfed.com/2017/02/26/chrome-layout/",target:"_blank",rel:"noopener noreferrer"}},[v._v("从Chrome源码看浏览器如何layout布局"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"总结-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("梳理一下这一节的主要脉络:")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b2f718e4ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"第5篇-说一说从输入url到页面呈现发生了什么？——渲染过程篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第5篇-说一说从输入url到页面呈现发生了什么？——渲染过程篇"}},[v._v("#")]),v._v(" 第5篇: 说一说从输入URL到页面呈现发生了什么？——渲染过程篇")]),v._v(" "),t("p",[v._v("上一节介绍了浏览器"),t("code",[v._v("解析")]),v._v("的过程,其中包含"),t("code",[v._v("构建DOM")]),v._v("、"),t("code",[v._v("样式计算")]),v._v("和"),t("code",[v._v("构建布局树")]),v._v("。")]),v._v(" "),t("p",[v._v("接下来就来拆解下一个过程——"),t("code",[v._v("渲染")]),v._v("。分为以下几个步骤:")]),v._v(" "),t("ul",[t("li",[v._v("建立"),t("code",[v._v("图层树")]),v._v("("),t("code",[v._v("Layer Tree")]),v._v(")")]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("绘制列表")])]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("图块")]),v._v("并"),t("code",[v._v("栅格化")])]),v._v(" "),t("li",[v._v("显示器显示内容")])]),v._v(" "),t("h3",{attrs:{id:"一、建图层树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、建图层树"}},[v._v("#")]),v._v(" 一、建图层树")]),v._v(" "),t("p",[v._v("如果你觉得现在"),t("code",[v._v("DOM节点")]),v._v("也有了，样式和位置信息也都有了，可以开始绘制页面了，那你就错了。")]),v._v(" "),t("p",[v._v("因为你考虑掉了另外一些复杂的场景，比如3D动画如何呈现出变换效果，当元素含有层叠上下文时如何控制显示和隐藏等等。")]),v._v(" "),t("p",[v._v("为了解决如上所述的问题，浏览器在构建完"),t("code",[v._v("布局树")]),v._v("之后，还会对特定的节点进行分层，构建一棵"),t("code",[v._v("图层树")]),v._v("("),t("code",[v._v("Layer Tree")]),v._v(")。")]),v._v(" "),t("p",[v._v("那这棵图层树是根据什么来构建的呢？")]),v._v(" "),t("p",[v._v("一般情况下，节点的图层会默认属于父亲节点的图层(这些图层也称为"),t("strong",[v._v("合成层")]),v._v(")。那什么时候会提升为一个单独的合成层呢？")]),v._v(" "),t("p",[v._v("有两种情况需要分别讨论，一种是"),t("strong",[v._v("显式合成")]),v._v("，一种是"),t("strong",[v._v("隐式合成")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"显式合成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#显式合成"}},[v._v("#")]),v._v(" 显式合成")]),v._v(" "),t("p",[v._v("下面是"),t("code",[v._v("显式合成")]),v._v("的情况:")]),v._v(" "),t("p",[v._v("一、 拥有"),t("strong",[v._v("层叠上下文")]),v._v("的节点。")]),v._v(" "),t("p",[v._v("层叠上下文也基本上是有一些特定的CSS属性创建的，一般有以下情况:")]),v._v(" "),t("ol",[t("li",[v._v("HTML根元素本身就具有层叠上下文。")]),v._v(" "),t("li",[v._v("普通元素设置"),t("strong",[v._v("position不为static")]),v._v("并且"),t("strong",[v._v("设置了z-index属性")]),v._v("，会产生层叠上下文。")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("opacity")]),v._v(" 值不是 1")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("transform")]),v._v(" 值不是 none")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("filter")]),v._v(" 值不是 none")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("isolation")]),v._v(" 值是isolate")]),v._v(" "),t("li",[t("strong",[v._v("will-change")]),v._v("指定的属性值为上面任意一个。(will-change的作用后面会详细介绍)")])]),v._v(" "),t("p",[v._v("二、需要"),t("strong",[v._v("剪裁")]),v._v("的地方。")]),v._v(" "),t("p",[v._v("比如一个div，你只给他设置 100 * 100 像素的大小，而你在里面放了非常多的文字，那么超出的文字部分就需要被剪裁。当然如果出现了滚动条，那么滚动条会被单独提升为一个图层。")]),v._v(" "),t("h4",{attrs:{id:"隐式合成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#隐式合成"}},[v._v("#")]),v._v(" 隐式合成")]),v._v(" "),t("p",[v._v("接下来是"),t("code",[v._v("隐式合成")]),v._v("，简单来说就是"),t("code",[v._v("层叠等级低")]),v._v("的节点被提升为单独的图层之后，那么"),t("code",[v._v("所有层叠等级比它高")]),v._v("的节点"),t("strong",[v._v("都会")]),v._v("成为一个单独的图层。")]),v._v(" "),t("p",[v._v("这个隐式合成其实隐藏着巨大的风险，如果在一个大型应用中，当一个"),t("code",[v._v("z-index")]),v._v("比较低的元素被提升为单独图层之后，层叠在它上面的的元素统统都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至直接让页面崩溃。这就是"),t("strong",[v._v("层爆炸")]),v._v("的原理。这里有一个具体的例子，"),t("a",{attrs:{href:"https://segmentfault.com/a/1190000014520786",target:"_blank",rel:"noopener noreferrer"}},[v._v("点击打开"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("值得注意的是，当需要"),t("code",[v._v("repaint")]),v._v("时，只需要"),t("code",[v._v("repaint")]),v._v("本身，而不会影响到其他的层。")]),v._v(" "),t("h3",{attrs:{id:"二、生成绘制列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、生成绘制列表"}},[v._v("#")]),v._v(" 二、生成绘制列表")]),v._v(" "),t("p",[v._v("接下来渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景、再描绘边框......然后将这些指令按顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划。")]),v._v(" "),t("p",[v._v("这里我以百度首页为例，大家可以在 Chrome 开发者工具中在设置栏中展开 "),t("code",[v._v("more tools")]),v._v(", 然后选择"),t("code",[v._v("Layers")]),v._v("面板，就能看到下面的绘制列表:")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b57cdb8f39?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"三、生成图块和生成位图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、生成图块和生成位图"}},[v._v("#")]),v._v(" 三、生成图块和生成位图")]),v._v(" "),t("p",[v._v("现在开始绘制操作，实际上在渲染进程中绘制操作是由专门的线程来完成的，这个线程叫"),t("strong",[v._v("合成线程")]),v._v("。")]),v._v(" "),t("p",[v._v("绘制列表准备好了之后，渲染进程的主线程会给"),t("code",[v._v("合成线程")]),v._v("发送"),t("code",[v._v("commit")]),v._v("消息，把绘制列表提交给合成线程。接下来就是合成线程一展宏图的时候啦。")]),v._v(" "),t("p",[v._v("首先，考虑到视口就这么大，当页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此，合成线程要做的第一件事情就是将图层"),t("strong",[v._v("分块")]),v._v("。这些块的大小一般不会特别大，通常是 256 * 256 或者 512 * 512 这个规格。这样可以大大加速页面的首屏展示。")]),v._v(" "),t("p",[v._v("因为后面图块数据要进入 GPU 内存，考虑到浏览器内存上传到 GPU 内存的操作比较慢，即使是绘制一部分图块，也可能会耗费大量时间。针对这个问题，Chrome 采用了一个策略: 在首次合成图块时只采用一个"),t("strong",[v._v("低分辨率")]),v._v("的图片，这样首屏展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的图块内容绘制完毕后，会将当前低分辨率的图块内容替换。这也是 Chrome 底层优化首屏加载速度的一个手段。")]),v._v(" "),t("p",[v._v("顺便提醒一点，渲染进程中专门维护了一个"),t("strong",[v._v("栅格化线程池")]),v._v("，专门负责把"),t("strong",[v._v("图块")]),v._v("转换为"),t("strong",[v._v("位图数据")]),v._v("。")]),v._v(" "),t("p",[v._v("然后合成线程会选择视口附近的"),t("strong",[v._v("图块")]),v._v("，把它交给"),t("strong",[v._v("栅格化线程池")]),v._v("生成位图。")]),v._v(" "),t("p",[v._v("生成位图的过程实际上都会使用 GPU 进行加速，生成的位图最后发送给"),t("code",[v._v("合成线程")]),v._v("。")]),v._v(" "),t("h3",{attrs:{id:"四、显示器显示内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、显示器显示内容"}},[v._v("#")]),v._v(" 四、显示器显示内容")]),v._v(" "),t("p",[v._v("栅格化操作完成后，"),t("strong",[v._v("合成线程")]),v._v('会生成一个绘制命令，即"DrawQuad"，并发送给浏览器进程。')]),v._v(" "),t("p",[v._v("浏览器进程中的"),t("code",[v._v("viz组件")]),v._v("接收到这个命令，根据这个命令，把页面内容绘制到内存，也就是生成了页面，然后把这部分内存发送给显卡。为什么发给显卡呢？我想有必要先聊一聊显示器显示图像的原理。")]),v._v(" "),t("p",[v._v("无论是 PC 显示器还是手机屏幕，都有一个固定的刷新频率，一般是 60 HZ，即 60 帧，也就是一秒更新 60 张图片，一张图片停留的时间约为 16.7 ms。而每次更新的图片都来自显卡的"),t("strong",[v._v("前缓冲区")]),v._v("。而显卡接收到浏览器进程传来的页面后，会合成相应的图像，并将图像保存到"),t("strong",[v._v("后缓冲区")]),v._v("，然后系统自动将"),t("code",[v._v("前缓冲区")]),v._v("和"),t("code",[v._v("后缓冲区")]),v._v("对换位置，如此循环更新。")]),v._v(" "),t("p",[v._v("看到这里你也就是明白，当某个动画大量占用内存的时候，浏览器生成图像的时候会变慢，图像传送给显卡就会不及时，而显示器还是以不变的频率刷新，因此会出现卡顿，也就是明显的掉帧现象。")]),v._v(" "),t("h3",{attrs:{id:"总结-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-5"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("到这里，我们算是把整个过程给走通了，现在重新来梳理一下页面渲染的流程。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080b7b8926b7f?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"第6篇-谈谈你对重绘和回流的理解。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第6篇-谈谈你对重绘和回流的理解。"}},[v._v("#")]),v._v(" 第6篇: 谈谈你对重绘和回流的理解。")]),v._v(" "),t("p",[v._v("我们首先来回顾一下"),t("code",[v._v("渲染流水线")]),v._v("的流程:")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080ba7fa706eb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("p",[v._v("接下来，我们将来以此为依据来介绍重绘和回流，以及让更新视图的另外一种方式——合成。")]),v._v(" "),t("h3",{attrs:{id:"回流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回流"}},[v._v("#")]),v._v(" 回流")]),v._v(" "),t("p",[v._v("首先介绍"),t("code",[v._v("回流")]),v._v("。"),t("code",[v._v("回流")]),v._v("也叫"),t("code",[v._v("重排")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"触发条件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发条件"}},[v._v("#")]),v._v(" 触发条件")]),v._v(" "),t("p",[v._v("简单来说，就是当我们对 DOM 结构的修改引发 DOM 几何尺寸变化的时候，会发生"),t("code",[v._v("回流")]),v._v("的过程。")]),v._v(" "),t("p",[v._v("具体一点，有以下的操作会触发回流:")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("一个 DOM 元素的几何属性变化，常见的几何属性有"),t("code",[v._v("width")]),v._v("、"),t("code",[v._v("height")]),v._v("、"),t("code",[v._v("padding")]),v._v("、"),t("code",[v._v("margin")]),v._v("、"),t("code",[v._v("left")]),v._v("、"),t("code",[v._v("top")]),v._v("、"),t("code",[v._v("border")]),v._v(" 等等, 这个很好理解。")])]),v._v(" "),t("li",[t("p",[v._v("使 DOM 节点发生"),t("code",[v._v("增减")]),v._v("或者"),t("code",[v._v("移动")]),v._v("。")])]),v._v(" "),t("li",[t("p",[v._v("读写 "),t("code",[v._v("offset")]),v._v("族、"),t("code",[v._v("scroll")]),v._v("族和"),t("code",[v._v("client")]),v._v("族属性的时候，浏览器为了获取这些值，需要进行回流操作。")])]),v._v(" "),t("li",[t("p",[v._v("调用 "),t("code",[v._v("window.getComputedStyle")]),v._v(" 方法。")])])]),v._v(" "),t("h4",{attrs:{id:"回流过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回流过程"}},[v._v("#")]),v._v(" 回流过程")]),v._v(" "),t("p",[v._v("依照上面的渲染流水线，触发回流的时候，如果 DOM 结构发生改变，则重新渲染 DOM 树，然后将后面的流程(包括主线程之外的任务)全部走一遍。")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f0809e65b3d2fc?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("p",[v._v("相当于将解析和合成的过程重新又走了一篇，开销是非常大的。")]),v._v(" "),t("h3",{attrs:{id:"重绘"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重绘"}},[v._v("#")]),v._v(" 重绘")]),v._v(" "),t("h4",{attrs:{id:"触发条件-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#触发条件-2"}},[v._v("#")]),v._v(" 触发条件")]),v._v(" "),t("p",[v._v("当 DOM 的修改导致了样式的变化，并且没有影响几何属性的时候，会导致"),t("code",[v._v("重绘")]),v._v("("),t("code",[v._v("repaint")]),v._v(")。")]),v._v(" "),t("h4",{attrs:{id:"重绘过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重绘过程"}},[v._v("#")]),v._v(" 重绘过程")]),v._v(" "),t("p",[v._v("由于没有导致 DOM 几何属性的变化，因此元素的位置信息不需要更新，从而省去布局的过程。流程如下：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080a26aa222d4?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("p",[v._v("跳过了"),t("code",[v._v("生成布局树")]),v._v("和"),t("code",[v._v("建图层树")]),v._v("的阶段，直接生成绘制列表，然后继续进行分块、生成位图等后面一系列操作。")]),v._v(" "),t("p",[v._v("可以看到，重绘不一定导致回流，但回流一定发生了重绘。")]),v._v(" "),t("h3",{attrs:{id:"合成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合成"}},[v._v("#")]),v._v(" 合成")]),v._v(" "),t("p",[v._v("还有一种情况，是直接合成。比如利用 CSS3 的"),t("code",[v._v("transform")]),v._v("、"),t("code",[v._v("opacity")]),v._v("、"),t("code",[v._v("filter")]),v._v("这些属性就可以实现合成的效果，也就是大家常说的"),t("strong",[v._v("GPU加速")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"gpu加速的原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gpu加速的原因"}},[v._v("#")]),v._v(" GPU加速的原因")]),v._v(" "),t("p",[v._v("在合成的情况下，会直接跳过布局和绘制流程，直接进入"),t("code",[v._v("非主线程")]),v._v("处理的部分，即直接交给"),t("code",[v._v("合成线程")]),v._v("处理。交给它处理有两大好处:")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("能够充分发挥"),t("code",[v._v("GPU")]),v._v("的优势。合成线程生成位图的过程中会调用线程池，并在其中使用"),t("code",[v._v("GPU")]),v._v("进行加速生成，而GPU 是擅长处理位图数据的。")])]),v._v(" "),t("li",[t("p",[v._v("没有占用主线程的资源，即使主线程卡住了，效果依然能够流畅地展示。")])])]),v._v(" "),t("h3",{attrs:{id:"实践意义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践意义"}},[v._v("#")]),v._v(" 实践意义")]),v._v(" "),t("p",[v._v("知道上面的原理之后，对于开发过程有什么指导意义呢？")]),v._v(" "),t("ol",[t("li",[v._v("避免频繁使用 style，而是采用修改"),t("code",[v._v("class")]),v._v("的方式。")]),v._v(" "),t("li",[v._v("使用"),t("code",[v._v("createDocumentFragment")]),v._v("进行批量的 DOM 操作。")]),v._v(" "),t("li",[v._v("对于 resize、scroll 等进行防抖/节流处理。")]),v._v(" "),t("li",[v._v("添加 will-change: tranform ，让渲染引擎为其单独实现一个图层，当这些变换发生时，仅仅只是利用合成线程去处理这些变换，而不牵扯到主线程，大大提高渲染效率。当然这个变化不限于"),t("code",[v._v("tranform")]),v._v(", 任何可以实现合成效果的 CSS 属性都能用"),t("code",[v._v("will-change")]),v._v("来声明。这里有一个实际的例子，一行"),t("code",[v._v("will-change: tranform")]),v._v("拯救一个项目，"),t("a",{attrs:{href:"https://juejin.im/post/5da52531518825094e373372",target:"_blank",rel:"noopener noreferrer"}},[v._v("点击直达"),t("OutboundLink")],1),v._v("。")])]),v._v(" "),t("h2",{attrs:{id:"第7篇-能不能说一说xss攻击？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第7篇-能不能说一说xss攻击？"}},[v._v("#")]),v._v(" 第7篇: 能不能说一说XSS攻击？")]),v._v(" "),t("h3",{attrs:{id:"什么是-xss-攻击？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-xss-攻击？"}},[v._v("#")]),v._v(" 什么是 XSS 攻击？")]),v._v(" "),t("p",[t("code",[v._v("XSS")]),v._v(" 全称是 "),t("code",[v._v("Cross Site Scripting")]),v._v("(即"),t("code",[v._v("跨站脚本")]),v._v(")，为了和 CSS 区分，故叫它"),t("code",[v._v("XSS")]),v._v("。XSS 攻击是指浏览器中执行恶意脚本(无论是跨域还是同域)，从而拿到用户的信息并进行操作。")]),v._v(" "),t("p",[v._v("这些操作一般可以完成下面这些事情:")]),v._v(" "),t("ol",[t("li",[v._v("窃取"),t("code",[v._v("Cookie")]),v._v("。")]),v._v(" "),t("li",[v._v("监听用户行为，比如输入账号密码后直接发送到黑客服务器。")]),v._v(" "),t("li",[v._v("修改 DOM 伪造登录表单。")]),v._v(" "),t("li",[v._v("在页面中生成浮窗广告。")])]),v._v(" "),t("p",[v._v("通常情况，XSS 攻击的实现有三种方式——"),t("strong",[v._v("存储型")]),v._v("、"),t("strong",[v._v("反射型")]),v._v("和"),t("strong",[v._v("文档型")]),v._v("。原理都比较简单，先来一一介绍一下。")]),v._v(" "),t("h4",{attrs:{id:"存储型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存储型"}},[v._v("#")]),v._v(" 存储型")]),v._v(" "),t("p",[t("code",[v._v("存储型")]),v._v("，顾名思义就是将恶意脚本存储了起来，确实，存储型的 XSS 将脚本存储到了服务端的数据库，然后在客户端执行这些脚本，从而达到攻击的效果。")]),v._v(" "),t("p",[v._v("常见的场景是留言评论区提交一段脚本代码，如果前后端没有做好转义的工作，那评论内容存到了数据库，在页面渲染过程中"),t("code",[v._v("直接执行")]),v._v(", 相当于执行一段未知逻辑的 JS 代码，是非常恐怖的。这就是存储型的 XSS 攻击。")]),v._v(" "),t("h4",{attrs:{id:"反射型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反射型"}},[v._v("#")]),v._v(" 反射型")]),v._v(" "),t("p",[t("code",[v._v("反射型XSS")]),v._v("指的是恶意脚本作为"),t("strong",[v._v("网络请求的一部分")]),v._v("。")]),v._v(" "),t("p",[v._v("比如我输入:")]),v._v(" "),t("pre",[t("code",[v._v('http://sanyuan.com?q=<script>alert("你完蛋了")<\/script>\n复制代码\n')])]),v._v(" "),t("p",[v._v("这杨，在服务器端会拿到"),t("code",[v._v("q")]),v._v("参数,然后将内容返回给浏览器端，浏览器将这些内容作为HTML的一部分解析，发现是一个脚本，直接执行，这样就被攻击了。")]),v._v(" "),t("p",[v._v("之所以叫它"),t("code",[v._v("反射型")]),v._v(", 是因为恶意脚本是通过作为网络请求的参数，经过服务器，然后再反射到HTML文档中，执行解析。和"),t("code",[v._v("存储型")]),v._v("不一样的是，服务器并不会存储这些恶意脚本。")]),v._v(" "),t("h4",{attrs:{id:"文档型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档型"}},[v._v("#")]),v._v(" 文档型")]),v._v(" "),t("p",[v._v("文档型的 XSS 攻击并不会经过服务端，而是作为中间人的角色，在数据传输过程劫持到网络数据包，然后"),t("strong",[v._v("修改里面的 html 文档")]),v._v("！")]),v._v(" "),t("p",[v._v("这样的劫持方式包括"),t("code",[v._v("WIFI路由器劫持")]),v._v("或者"),t("code",[v._v("本地恶意软件")]),v._v("等。")]),v._v(" "),t("h3",{attrs:{id:"防范措施"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防范措施"}},[v._v("#")]),v._v(" 防范措施")]),v._v(" "),t("p",[v._v("明白了三种"),t("code",[v._v("XSS")]),v._v("攻击的原理，我们能发现一个共同点: 都是让恶意脚本直接能在浏览器中执行。")]),v._v(" "),t("p",[v._v("那么要防范它，就是要避免这些脚本代码的执行。")]),v._v(" "),t("p",[v._v("为了完成这一点，必须做到"),t("strong",[v._v("一个信念，两个利用")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"一个信念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一个信念"}},[v._v("#")]),v._v(" 一个信念")]),v._v(" "),t("p",[v._v("千万不要相信任何用户的输入！")]),v._v(" "),t("p",[v._v("无论是在前端和服务端，都要对用户的输入进行"),t("strong",[v._v("转码")]),v._v("或者"),t("strong",[v._v("过滤")]),v._v("。")]),v._v(" "),t("p",[v._v("如:")]),v._v(" "),t("pre",[t("code",[v._v("<script>alert('你完蛋了')<\/script>\n复制代码\n")])]),v._v(" "),t("p",[v._v("转码后变为:")]),v._v(" "),t("pre",[t("code",[v._v("&lt;script&gt;alert(&#39;你完蛋了&#39;)&lt;/script&gt;\n复制代码\n")])]),v._v(" "),t("p",[v._v("这样的代码在 html 解析的过程中是无法执行的。")]),v._v(" "),t("p",[v._v("当然也可以利用关键词过滤的方式，将 script 标签给删除。那么现在的内容只剩下:")]),v._v(" "),t("pre",[t("code",[v._v("复制代码\n")])]),v._v(" "),t("p",[v._v("什么也没有了:）")]),v._v(" "),t("h4",{attrs:{id:"利用-csp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用-csp"}},[v._v("#")]),v._v(" 利用 CSP")]),v._v(" "),t("p",[v._v("CSP网页安全政策(Content Security Policy)，它的核心思想就是服务器决定浏览器加载哪些资源(CSP 的实质就是白名单制度)，具体来说可以完成以下功能:")]),v._v(" "),t("ol",[t("li",[v._v("限制其他域下的资源加载。")]),v._v(" "),t("li",[v._v("禁止向其它域提交数据。")]),v._v(" "),t("li",[v._v("提供上报机制，能帮助我们及时发现 XSS 攻击。")])]),v._v(" "),t("h4",{attrs:{id:"利用-httponly"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用-httponly"}},[v._v("#")]),v._v(" 利用 HttpOnly")]),v._v(" "),t("p",[v._v("很多 XSS 攻击脚本都是用来窃取Cookie, 而设置 Cookie 的 HttpOnly 属性后，JavaScript 便无法读取 Cookie 的值。这样也能很好的防范 XSS 攻击。")]),v._v(" "),t("h3",{attrs:{id:"总结-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-6"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[t("code",[v._v("XSS")]),v._v(" 攻击是指浏览器中执行恶意脚本, 然后拿到用户的信息进行操作。主要分为"),t("code",[v._v("存储型")]),v._v("、"),t("code",[v._v("反射型")]),v._v("和"),t("code",[v._v("文档型")]),v._v("。防范的措施包括:")]),v._v(" "),t("ul",[t("li",[v._v("一个信念: 不要相信用户的输入，对输入内容转码或者过滤，让其不可执行。")]),v._v(" "),t("li",[v._v("两个利用: 利用 CSP，利用 Cookie 的 HttpOnly 属性。")])]),v._v(" "),t("h2",{attrs:{id:"第8篇-能不能说一说csrf攻击？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第8篇-能不能说一说csrf攻击？"}},[v._v("#")]),v._v(" 第8篇: 能不能说一说CSRF攻击？")]),v._v(" "),t("h3",{attrs:{id:"什么是csrf攻击？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是csrf攻击？"}},[v._v("#")]),v._v(" 什么是CSRF攻击？")]),v._v(" "),t("p",[v._v("CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户"),t("strong",[v._v("目前的登录状态")]),v._v("发起跨站请求。")]),v._v(" "),t("p",[v._v("举个例子, 你在某个论坛点击了黑客精心挑选的小姐姐图片，你点击后，进入了一个新的页面。")]),v._v(" "),t("p",[v._v("那么恭喜你，被攻击了:）")]),v._v(" "),t("p",[v._v("你可能会比较好奇，怎么突然就被攻击了呢？接下来我们就来拆解一下当你点击了链接之后，黑客在背后做了哪些事情。")]),v._v(" "),t("p",[v._v("可能会做三样事情。列举如下：")]),v._v(" "),t("h4",{attrs:{id:"_1-自动发-get-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自动发-get-请求"}},[v._v("#")]),v._v(" 1. 自动发 GET 请求")]),v._v(" "),t("p",[v._v("黑客网页里面可能有一段这样的代码:")]),v._v(" "),t("pre",[t("code",[v._v('<img src="https://xxx.com/info?user=hhh&count=100">\n复制代码\n')])]),v._v(" "),t("p",[v._v("进入页面后自动发送 get 请求，值得注意的是，这个请求会自动带上关于 xxx.com 的 cookie 信息(这里是假定你已经在 xxx.com 中登录过)。")]),v._v(" "),t("p",[v._v("假如服务器端没有相应的验证机制，它可能认为发请求的是一个正常的用户，因为携带了相应的 cookie，然后进行相应的各种操作，可以是转账汇款以及其他的恶意操作。")]),v._v(" "),t("h4",{attrs:{id:"_2-自动发-post-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-自动发-post-请求"}},[v._v("#")]),v._v(" 2. 自动发 POST 请求")]),v._v(" "),t("p",[v._v("黑客可能自己填了一个表单，写了一段自动提交的脚本。")]),v._v(" "),t("pre",[t("code",[v._v('<form id=\'hacker-form\' action="https://xxx.com/info" method="POST">\n  <input type="hidden" name="user" value="hhh" />\n  <input type="hidden" name="count" value="100" />\n</form>\n<script>document.getElementById(\'hacker-form\').submit();<\/script>\n复制代码\n')])]),v._v(" "),t("p",[v._v("同样也会携带相应的用户 cookie 信息，让服务器误以为是一个正常的用户在操作，让各种恶意的操作变为可能。")]),v._v(" "),t("h4",{attrs:{id:"_3-诱导点击发送-get-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-诱导点击发送-get-请求"}},[v._v("#")]),v._v(" 3. 诱导点击发送 GET 请求")]),v._v(" "),t("p",[v._v("在黑客的网站上，可能会放上一个链接，驱使你来点击:")]),v._v(" "),t("pre",[t("code",[v._v('<a href="https://xxx/info?user=hhh&count=100" taget="_blank">点击进入修仙世界</a>\n复制代码\n')])]),v._v(" "),t("p",[v._v("点击后，自动发送 get 请求，接下来和"),t("code",[v._v("自动发 GET 请求")]),v._v("部分同理。")]),v._v(" "),t("p",[v._v("这就是"),t("code",[v._v("CSRF")]),v._v("攻击的原理。和"),t("code",[v._v("XSS")]),v._v("攻击对比，CSRF 攻击并不需要将恶意代码注入用户当前页面的"),t("code",[v._v("html")]),v._v("文档中，而是跳转到新的页面，利用服务器的"),t("strong",[v._v("验证漏洞")]),v._v("和"),t("strong",[v._v("用户之前的登录状态")]),v._v("来模拟用户进行操作。")]),v._v(" "),t("h3",{attrs:{id:"防范措施-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防范措施-2"}},[v._v("#")]),v._v(" 防范措施")]),v._v(" "),t("h4",{attrs:{id:"_1-利用cookie的samesite属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-利用cookie的samesite属性"}},[v._v("#")]),v._v(" 1. 利用Cookie的SameSite属性")]),v._v(" "),t("p",[t("code",[v._v("CSRF攻击")]),v._v("中重要的一环就是自动发送目标站点下的 "),t("code",[v._v("Cookie")]),v._v(",然后就是这一份 Cookie 模拟了用户的身份。因此在"),t("code",[v._v("Cookie")]),v._v("上面下文章是防范的不二之选。")]),v._v(" "),t("p",[v._v("恰好，在 Cookie 当中有一个关键的字段，可以对请求中 Cookie 的携带作一些限制，这个字段就是"),t("code",[v._v("SameSite")]),v._v("。")]),v._v(" "),t("p",[t("code",[v._v("SameSite")]),v._v("可以设置为三个值，"),t("code",[v._v("Strict")]),v._v("、"),t("code",[v._v("Lax")]),v._v("和"),t("code",[v._v("None")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("a.")]),v._v(" 在"),t("code",[v._v("Strict")]),v._v("模式下，浏览器完全禁止第三方请求携带Cookie。比如请求"),t("code",[v._v("sanyuan.com")]),v._v("网站只能在"),t("code",[v._v("sanyuan.com")]),v._v("域名当中请求才能携带 Cookie，在其他网站请求都不能。")]),v._v(" "),t("p",[t("strong",[v._v("b.")]),v._v(" 在"),t("code",[v._v("Lax")]),v._v("模式，就宽松一点了，但是只能在 "),t("code",[v._v("get 方法提交表单")]),v._v("况或者"),t("code",[v._v("a 标签发送 get 请求")]),v._v("的情况下可以携带 Cookie，其他情况均不能。")]),v._v(" "),t("p",[t("strong",[v._v("c.")]),v._v(" 在"),t("code",[v._v("None")]),v._v("模式下，也就是默认模式，请求会自动携带上 Cookie。")]),v._v(" "),t("h4",{attrs:{id:"_2-验证来源站点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-验证来源站点"}},[v._v("#")]),v._v(" 2. 验证来源站点")]),v._v(" "),t("p",[v._v("这就需要要用到请求头中的两个字段: "),t("strong",[v._v("Origin")]),v._v("和"),t("strong",[v._v("Referer")]),v._v("。")]),v._v(" "),t("p",[v._v("其中，"),t("strong",[v._v("Origin")]),v._v("只包含域名信息，而"),t("strong",[v._v("Referer")]),v._v("包含了"),t("code",[v._v("具体")]),v._v("的 URL 路径。")]),v._v(" "),t("p",[v._v("当然，这两者都是可以伪造的，通过 Ajax 中自定义请求头即可，安全性略差。")]),v._v(" "),t("h4",{attrs:{id:"_3-csrf-token"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-csrf-token"}},[v._v("#")]),v._v(" 3. CSRF Token")]),v._v(" "),t("p",[t("code",[v._v("Django")]),v._v("作为 Python 的一门后端框架，如果是用它开发过的同学就知道，在它的模板(template)中, 开发表单时，经常会附上这样一行代码:")]),v._v(" "),t("pre",[t("code",[v._v("{% csrf_token %}\n复制代码\n")])]),v._v(" "),t("p",[v._v("这就是"),t("code",[v._v("CSRF Token")]),v._v("的典型应用。那它的原理是怎样的呢？")]),v._v(" "),t("p",[v._v("首先，浏览器向服务器发送请求时，服务器生成一个字符串，将其植入到返回的页面中。")]),v._v(" "),t("p",[v._v("然后浏览器如果要发送请求，就必须带上这个字符串，然后服务器来验证是否合法，如果不合法则不予响应。这个字符串也就是"),t("code",[v._v("CSRF Token")]),v._v("，通常第三方站点无法拿到这个 token, 因此也就是被服务器给拒绝。")]),v._v(" "),t("h3",{attrs:{id:"总结-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-7"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("CSRF(Cross-site request forgery), 即跨站请求伪造，指的是黑客诱导用户点击链接，打开黑客的网站，然后黑客利用用户目前的登录状态发起跨站请求。")]),v._v(" "),t("p",[t("code",[v._v("CSRF")]),v._v("攻击一般会有三种方式:")]),v._v(" "),t("ul",[t("li",[v._v("自动 GET 请求")]),v._v(" "),t("li",[v._v("自动 POST 请求")]),v._v(" "),t("li",[v._v("诱导点击发送 GET 请求。")])]),v._v(" "),t("p",[v._v("防范措施: "),t("code",[v._v("利用 Cookie 的 SameSite 属性")]),v._v("、"),t("code",[v._v("验证来源站点")]),v._v("和"),t("code",[v._v("CSRF Token")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"第9篇-https为什么让数据传输更安全？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第9篇-https为什么让数据传输更安全？"}},[v._v("#")]),v._v(" 第9篇:HTTPS为什么让数据传输更安全？")]),v._v(" "),t("p",[v._v("谈到"),t("code",[v._v("HTTPS")]),v._v(", 就不得不谈到与之相对的"),t("code",[v._v("HTTP")]),v._v("。"),t("code",[v._v("HTTP")]),v._v("的特性是明文传输，因此在传输的每一个环节，数据都有可能被第三方窃取或者篡改，具体来说，HTTP 数据经过 TCP 层，然后经过"),t("code",[v._v("WIFI路由器")]),v._v("、"),t("code",[v._v("运营商")]),v._v("和"),t("code",[v._v("目标服务器")]),v._v("，这些环节中都可能被中间人拿到数据并进行篡改，也就是我们常说的"),t("strong",[v._v("中间人攻击")]),v._v("。")]),v._v(" "),t("p",[v._v("为了防范这样一类攻击，我们不得已要引入新的加密方案，即 HTTPS。")]),v._v(" "),t("p",[t("code",[v._v("HTTPS")]),v._v("并不是一个新的协议, 而是一个加强版的"),t("code",[v._v("HTTP")]),v._v("。其原理是在"),t("code",[v._v("HTTP")]),v._v("和"),t("code",[v._v("TCP")]),v._v("之间建立了一个中间层，当"),t("code",[v._v("HTTP")]),v._v("和"),t("code",[v._v("TCP")]),v._v("通信时并不是像以前那样直接通信，直接经过了一个中间层进行加密，将加密后的数据包传给"),t("code",[v._v("TCP")]),v._v(", 响应的，"),t("code",[v._v("TCP")]),v._v("必须将数据包解密，才能传给上面的"),t("code",[v._v("HTTP")]),v._v("。这个中间层也叫"),t("code",[v._v("安全层")]),v._v("。"),t("code",[v._v("安全层")]),v._v("的核心就是对数据"),t("code",[v._v("加解密")]),v._v("。")]),v._v(" "),t("p",[v._v("接下来我们就来剖析一下"),t("code",[v._v("HTTPS")]),v._v("的加解密是如何实现的。")]),v._v(" "),t("h3",{attrs:{id:"对称加密和非对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对称加密和非对称加密"}},[v._v("#")]),v._v(" 对称加密和非对称加密")]),v._v(" "),t("h4",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),t("p",[v._v("首先需要理解"),t("code",[v._v("对称加密")]),v._v("和"),t("code",[v._v("非对称加密")]),v._v("的概念，然后讨论两者应用后的效果如何。")]),v._v(" "),t("p",[t("code",[v._v("对称加密")]),v._v("是最简单的方式，指的是"),t("code",[v._v("加密")]),v._v("和"),t("code",[v._v("解密")]),v._v("用的是"),t("strong",[v._v("同样的密钥")]),v._v("。")]),v._v(" "),t("p",[v._v("而对于"),t("code",[v._v("非对称加密")]),v._v("，如果有 A、 B 两把密钥，如果用 A 加密过的数据包只能用 B 解密，反之，如果用 B 加密过的数据包只能用 A 解密。")]),v._v(" "),t("h4",{attrs:{id:"加解密过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加解密过程"}},[v._v("#")]),v._v(" 加解密过程")]),v._v(" "),t("p",[v._v("接着我们来谈谈"),t("code",[v._v("浏览器")]),v._v("和"),t("code",[v._v("服务器")]),v._v("进行协商加解密的过程。")]),v._v(" "),t("p",[v._v("首先，浏览器会给服务器发送一个随机数"),t("code",[v._v("client_random")]),v._v("和一个加密的方法列表。")]),v._v(" "),t("p",[v._v("服务器接收后给浏览器返回另一个随机数"),t("code",[v._v("server_random")]),v._v("和加密方法。")]),v._v(" "),t("p",[v._v("现在，两者拥有三样相同的凭证: "),t("code",[v._v("client_random")]),v._v("、"),t("code",[v._v("server_random")]),v._v("和加密方法。")]),v._v(" "),t("p",[v._v("接着用这个加密方法将两个随机数混合起来生成密钥，这个密钥就是浏览器和服务端通信的"),t("code",[v._v("暗号")]),v._v("。")]),v._v(" "),t("h4",{attrs:{id:"各自应用的效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各自应用的效果"}},[v._v("#")]),v._v(" 各自应用的效果")]),v._v(" "),t("p",[v._v("如果用"),t("code",[v._v("对称加密")]),v._v("的方式，那么第三方可以在中间获取到"),t("code",[v._v("client_random")]),v._v("、"),t("code",[v._v("server_random")]),v._v("和加密方法，由于这个加密方法同时可以解密，所以中间人可以成功对暗号进行解密，拿到数据，很容易就将这种加密方式破解了。")]),v._v(" "),t("p",[v._v("既然"),t("code",[v._v("对称加密")]),v._v("这么不堪一击，我们就来试一试"),t("code",[v._v("非对称")]),v._v("加密。在这种加密方式中，服务器手里有两把钥匙，一把是"),t("code",[v._v("公钥")]),v._v("，也就是说每个人都能拿到，是公开的，另一把是"),t("code",[v._v("私钥")]),v._v("，这把私钥只有服务器自己知道。")]),v._v(" "),t("p",[v._v("好，现在开始传输。")]),v._v(" "),t("p",[v._v("浏览器把"),t("code",[v._v("client_random")]),v._v("和加密方法列表传过来，服务器接收到，把"),t("code",[v._v("server_random")]),v._v("、"),t("code",[v._v("加密方法")]),v._v("和"),t("code",[v._v("公钥")]),v._v("传给浏览器。")]),v._v(" "),t("p",[v._v("现在两者拥有相同的"),t("code",[v._v("client_random")]),v._v("、"),t("code",[v._v("server_random")]),v._v("和加密方法。然后浏览器用公钥将"),t("code",[v._v("client_random")]),v._v("和"),t("code",[v._v("server_random")]),v._v("加密，生成与服务器通信的"),t("code",[v._v("暗号")]),v._v("。")]),v._v(" "),t("p",[v._v("这时候由于是"),t("strong",[v._v("非对称加密")]),v._v("，公钥加密过的数据只能用"),t("code",[v._v("私钥")]),v._v("解密，因此中间人就算拿到浏览器传来的数据，由于他没有私钥，照样无法解密，保证了数据的安全性。")]),v._v(" "),t("p",[v._v("这难道一定就安全吗？聪明的小伙伴早就发现了端倪。回到"),t("code",[v._v("非对称加密")]),v._v("的定义，公钥加密的数据可以用私钥解密，那私钥加密的数据也可以用公钥解密呀！")]),v._v(" "),t("p",[v._v("服务器的数据只能用私钥进行加密(因为如果它用公钥那么浏览器也没法解密啦)，中间人一旦拿到公钥，那么就可以对服务端传来的数据进行解密了，就这样又被破解了。而且，只是采用非对称加密，对于服务器性能的消耗也是相当巨大的，因此我们暂且不采用这种方案。")]),v._v(" "),t("h3",{attrs:{id:"对称加密和非对称加密的结合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对称加密和非对称加密的结合"}},[v._v("#")]),v._v(" 对称加密和非对称加密的结合")]),v._v(" "),t("p",[v._v("可以发现，对称加密和非对称加密，单独应用任何一个，都会存在安全隐患。那我们能不能把两者结合，进一步保证安全呢？")]),v._v(" "),t("p",[v._v("其实是可以的，演示一下整个流程：")]),v._v(" "),t("ol",[t("li",[v._v("浏览器向服务器发送"),t("code",[v._v("client_random")]),v._v("和加密方法列表。")]),v._v(" "),t("li",[v._v("服务器接收到，返回"),t("code",[v._v("server_random")]),v._v("、加密方法以及公钥。")]),v._v(" "),t("li",[v._v("浏览器接收，接着生成另一个随机数"),t("code",[v._v("pre_random")]),v._v(", 并且用公钥加密，传给服务器。(敲黑板！重点操作！)")]),v._v(" "),t("li",[v._v("服务器用私钥解密这个被加密后的"),t("code",[v._v("pre_random")]),v._v("。")])]),v._v(" "),t("p",[v._v("现在浏览器和服务器有三样相同的凭证:"),t("code",[v._v("client_random")]),v._v("、"),t("code",[v._v("server_random")]),v._v("和"),t("code",[v._v("pre_random")]),v._v("。然后两者用相同的加密方法混合这三个随机数，生成最终的"),t("code",[v._v("密钥")]),v._v("。")]),v._v(" "),t("p",[v._v("然后浏览器和服务器尽管用一样的密钥进行通信，即使用"),t("code",[v._v("对称加密")]),v._v("。")]),v._v(" "),t("p",[v._v("这个最终的密钥是很难被中间人拿到的，为什么呢? 因为中间人没有私钥，从而"),t("strong",[v._v("拿不到pre_random")]),v._v("，也就无法生成最终的密钥了。")]),v._v(" "),t("p",[v._v("回头比较一下和单纯的使用"),t("strong",[v._v("非对称加密")]),v._v(", 这种方式做了什么改进呢？本质上是"),t("strong",[v._v("防止了私钥加密的数据外传")]),v._v("。单独使用"),t("strong",[v._v("非对称加密")]),v._v("，最大的漏洞在于服务器传数据给浏览器只能用"),t("code",[v._v("私钥")]),v._v("加密，这是危险产生的根源。利用"),t("code",[v._v("对称和非对称")]),v._v("加密结合的方式，就防止了这一点，从而保证了安全。")]),v._v(" "),t("h3",{attrs:{id:"添加数字证书"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加数字证书"}},[v._v("#")]),v._v(" 添加数字证书")]),v._v(" "),t("p",[v._v("尽管通过两者加密方式的结合，能够很好地实现加密传输，但实际上还是存在一些问题。黑客如果采用 DNS 劫持，将目标地址替换成黑客服务器的地址，然后黑客自己造一份公钥和私钥，照样能进行数据传输。而对于浏览器用户而言，他是不知道自己正在访问一个危险的服务器的。")]),v._v(" "),t("p",[v._v("事实上"),t("code",[v._v("HTTPS")]),v._v("在上述"),t("code",[v._v("结合对称和非对称加密")]),v._v("的基础上，又添加了"),t("code",[v._v("数字证书认证")]),v._v("的步骤。其目的就是让服务器证明自己的身份。")]),v._v(" "),t("h4",{attrs:{id:"传输过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传输过程"}},[v._v("#")]),v._v(" 传输过程")]),v._v(" "),t("p",[v._v("为了获取这个证书，服务器运营者需要向第三方认证机构获取授权，这个第三方机构也叫"),t("code",[v._v("CA")]),v._v("("),t("code",[v._v("Certificate Authority")]),v._v("), 认证通过后 CA 会给服务器颁发"),t("strong",[v._v("数字证书")]),v._v("。")]),v._v(" "),t("p",[v._v("这个数字证书有两个作用:")]),v._v(" "),t("ol",[t("li",[v._v("服务器向浏览器证明自己的身份。")]),v._v(" "),t("li",[v._v("把公钥传给浏览器。")])]),v._v(" "),t("p",[v._v("这个验证的过程发生在什么时候呢？")]),v._v(" "),t("p",[v._v("当服务器传送"),t("code",[v._v("server_random")]),v._v("、加密方法的时候，顺便会带上"),t("code",[v._v("数字证书")]),v._v("(包含了"),t("code",[v._v("公钥")]),v._v("), 接着浏览器接收之后就会开始验证数字证书。如果验证通过，那么后面的过程照常进行，否则拒绝执行。")]),v._v(" "),t("p",[v._v("现在我们来梳理一下"),t("code",[v._v("HTTPS")]),v._v("最终的加解密过程:")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/15/16f080a6f6375dc1?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),v._v(" "),t("h4",{attrs:{id:"认证过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认证过程"}},[v._v("#")]),v._v(" 认证过程")]),v._v(" "),t("p",[v._v("浏览器拿到数字证书后，如何来对证书进行认证呢？")]),v._v(" "),t("p",[v._v("首先，会读取证书中的明文内容。CA 进行数字证书的签名时会保存一个 Hash 函数，来这个函数来计算明文内容得到"),t("code",[v._v("信息A")]),v._v("，然后用公钥解密明文内容得到"),t("code",[v._v("信息B")]),v._v("，两份信息做比对，一致则表示认证合法。")]),v._v(" "),t("p",[v._v("当然有时候对于浏览器而言，它不知道哪些 CA 是值得信任的，因此会继续查找 CA 的上级 CA，以同样的信息比对方式验证上级 CA 的合法性。一般根级的 CA 会内置在操作系统当中，当然如果向上找没有找到根级的 CA，那么将被视为不合法。")]),v._v(" "),t("h3",{attrs:{id:"总结-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-8"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[v._v("HTTPS并不是一个新的协议, 它在"),t("code",[v._v("HTTP")]),v._v("和"),t("code",[v._v("TCP")]),v._v("的传输中建立了一个安全层，利用"),t("code",[v._v("对称加密")]),v._v("和"),t("code",[v._v("非对称加密")]),v._v("结合数字证书认证的方式，让传输过程的安全性大大提高。")]),v._v(" "),t("h2",{attrs:{id:"第10篇-能不能实现事件的防抖和节流？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第10篇-能不能实现事件的防抖和节流？"}},[v._v("#")]),v._v(" 第10篇: 能不能实现事件的防抖和节流？")]),v._v(" "),t("h3",{attrs:{id:"节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#节流"}},[v._v("#")]),v._v(" 节流")]),v._v(" "),t("p",[v._v("节流的核心思想: 如果在定时器的时间范围内再次触发，则不予理睬，等当前定时器"),t("code",[v._v("完成")]),v._v("，才能启动"),t("strong",[v._v("下一个定时器任务")]),v._v("。这就好比公交车，10 分钟一趟，10 分钟内有多少人在公交站等我不管，10 分钟一到我就要发车走人！")]),v._v(" "),t("p",[v._v("代码如下:")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[v._v("throttle")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" interval")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("...")]),v._v("args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" context "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" now "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("now "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v(" last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v(" interval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n    last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" now\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),t("h3",{attrs:{id:"防抖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#防抖"}},[v._v("#")]),v._v(" 防抖")]),v._v(" "),t("p",[v._v("核心思想: 每次事件触发则删除原来的定时器，建立新的定时器。你反复触发回城功能，那么只认最后一次，从最后一次触发开始计时。")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function-variable function"}},[v._v("debounce")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" delay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" timer "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("...")]),v._v("args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" context "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("clearTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      timer "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" delay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),t("h3",{attrs:{id:"双剑合璧——加强版节流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双剑合璧——加强版节流"}},[v._v("#")]),v._v(" 双剑合璧——加强版节流")]),v._v(" "),t("p",[v._v("现在我们可以把"),t("code",[v._v("防抖")]),v._v("和"),t("code",[v._v("节流")]),v._v("放到一起，为什么呢？因为防抖有时候触发的太频繁会导致一次响应都没有，我们希望到了固定的时间必须给用户一个响应，事实上很多前端库就是采取了这样的思路。")]),v._v(" "),t("div",{staticClass:"language-javascript extra-class"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[v._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("throttle")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[v._v("fn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" delay")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" timer "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("return")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("...")]),v._v("args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" context "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("let")]),v._v(" now "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("Date")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("now "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("-")]),v._v(" last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v(" delay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("clearTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("timer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("setTimeout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("function")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n            last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n            "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" delay"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("else")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n          "),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 这个时候表示时间到了，必须给响应")]),v._v("\n          last "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" now"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n          "),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("fn")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[v._v("apply")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),v._v("context"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(",")]),v._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])])]),t("h2",{attrs:{id:"第11篇-能不能实现图片懒加载？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第11篇-能不能实现图片懒加载？"}},[v._v("#")]),v._v(" 第11篇: 能不能实现图片懒加载？")]),v._v(" "),t("h3",{attrs:{id:"方案一-clientheight、scrolltop-和-offsettop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案一-clientheight、scrolltop-和-offsettop"}},[v._v("#")]),v._v(" 方案一:clientHeight、scrollTop 和 offsetTop")]),v._v(" "),t("p",[v._v("首先给图片一个占位资源:")]),v._v(" "),t("pre",[t("code",[v._v('<img src="default.jpg" data-src="http://www.xxx.com/target.jpg" />\n复制代码\n')])]),v._v(" "),t("p",[v._v("接着，通过监听 scroll 事件来判断图片是否到达视口:")]),v._v(" "),t("pre",[t("code",[v._v('let img = document.getElementsByTagName("img");\nlet num = img.length;\nlet count = 0;//计数器，从第一张图片开始计\n\nlazyload();//首次加载别忘了显示图片\n\nwindow.addEventListener(\'scroll\', lazyload);\n\nfunction lazyload() {\n  let viewHeight = document.documentElement.clientHeight;//视口高度\n  let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;//滚动条卷去的高度\n  for(let i = count; i <num; i++) {\n    // 元素现在已经出现在视口中\n    if(img[i].offsetTop < scrollHeight + viewHeight) {\n      if(img[i].getAttribute("src") !== "default.jpg") continue;\n      img[i].src = img[i].getAttribute("data-src");\n      count ++;\n    }\n  }\n}\n复制代码\n')])]),v._v(" "),t("p",[v._v("当然，最好对 scroll 事件做节流处理，以免频繁触发:")]),v._v(" "),t("pre",[t("code",[v._v("// throttle函数我们上节已经实现\nwindow.addEventListener('scroll', throttle(lazyload, 200));\n复制代码\n")])]),v._v(" "),t("h3",{attrs:{id:"方案二：getboundingclientrect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案二：getboundingclientrect"}},[v._v("#")]),v._v(" 方案二：getBoundingClientRect")]),v._v(" "),t("p",[v._v("现在我们用另外一种方式来判断图片是否出现在了当前视口, 即 DOM 元素的 "),t("code",[v._v("getBoundingClientRect")]),v._v(" API。")]),v._v(" "),t("p",[v._v("上述的 lazyload 函数改成下面这样:")]),v._v(" "),t("pre",[t("code",[v._v('function lazyload() {\n  for(let i = count; i <num; i++) {\n    // 元素现在已经出现在视口中\n    if(img[i].getBoundingClientRect().top < document.documentElement.clientHeight) {\n      if(img[i].getAttribute("src") !== "default.jpg") continue;\n      img[i].src = img[i].getAttribute("data-src");\n      count ++;\n    }\n  }\n}\n复制代码\n')])]),v._v(" "),t("h3",{attrs:{id:"方案三-intersectionobserver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方案三-intersectionobserver"}},[v._v("#")]),v._v(" 方案三: IntersectionObserver")]),v._v(" "),t("p",[v._v("这是浏览器内置的一个"),t("code",[v._v("API")]),v._v("，实现了"),t("code",[v._v("监听window的scroll事件")]),v._v("、"),t("code",[v._v("判断是否在视口中")]),v._v("以及"),t("code",[v._v("节流")]),v._v("三大功能。")]),v._v(" "),t("p",[v._v("我们来具体试一把：")]),v._v(" "),t("pre",[t("code",[v._v('let img = document.getElementsByTagName("img");\n\nconst observer = new IntersectionObserver(changes => {\n  //changes 是被观察的元素集合\n  for(let i = 0, len = changes.length; i < len; i++) {\n    let change = changes[i];\n    // 通过这个属性判断是否在视口中\n    if(change.isIntersecting) {\n      const imgElement = change.target;\n      imgElement.src = imgElement.getAttribute("data-src");\n      observer.unobserve(imgElement);\n    }\n  }\n})\nArray.from(img).forEach(item => observer.observe(item));\n复制代码\n')])]),v._v(" "),t("p",[v._v("这样就很方便地实现了图片懒加载，当然这个"),t("code",[v._v("IntersectionObserver")]),v._v("也可以用作其他资源的预加载，功能非常强大。")]),v._v(" "),t("p",[v._v("参考文献:")]),v._v(" "),t("p",[t("a",{attrs:{href:"https://time.geekbang.org/column/article/169468",target:"_blank",rel:"noopener noreferrer"}},[v._v("极客时间浏览器专栏"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/post/5da52531518825094e373372",target:"_blank",rel:"noopener noreferrer"}},[v._v("浏览器层合成与页面渲染优化"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#The_browsers_we_will_talk_about",target:"_blank",rel:"noopener noreferrer"}},[v._v("浏览器是如何工作的"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/post/5dbf7b6a6fb9a0207326b32b",target:"_blank",rel:"noopener noreferrer"}},[v._v("山月——实现图片懒加载的几种方案比较"),t("OutboundLink")],1)]),v._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/book/5b936540f265da0a9624b04b",target:"_blank",rel:"noopener noreferrer"}},[v._v("掘金小册——前端性能优化原理与实践"),t("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);